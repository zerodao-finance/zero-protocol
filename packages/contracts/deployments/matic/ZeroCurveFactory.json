{
  "address": "0x679d6e265eB604CBd71Ad8b9c43FEa85012d97Fc",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_wrapper",
          "type": "address"
        }
      ],
      "name": "CreateWrapper",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_underlying",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_tokenInIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenOutIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "createWrapper",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x60176f4eec5d300948d7bdb65110adff256f719206b75035435056d2fef0f8d6",
  "receipt": {
    "to": null,
    "from": "0x6cd38c3148fc1D5d3c12353610ca6b2886F8f78C",
    "contractAddress": "0x679d6e265eB604CBd71Ad8b9c43FEa85012d97Fc",
    "transactionIndex": 75,
    "gasUsed": "2419906",
    "logsBloom": "0x
    "blockHash": "0xa2cc5a4352eb89ead9d472a7a90fd9de8590b34876a64dd047ffb496839a235d",
    "transactionHash": "0x60176f4eec5d300948d7bdb65110adff256f719206b75035435056d2fef0f8d6",
    "logs": [
      {
        "transactionIndex": 75,
        "blockNumber": 24437406,
        "transactionHash": "0x60176f4eec5d300948d7bdb65110adff256f719206b75035435056d2fef0f8d6",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000006cd38c3148fc1d5d3c12353610ca6b2886f8f78c",
          "0x00000000000000000000000026c80cc193b27d73d2c40943acec77f4da2c5bd8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000010af106cb6451200000000000000000000000000000000000000000000000035f283a8a9d8687c300000000000000000000000000000000000000000000000d5721f99440d1f89d0000000000000000000000000000000000000000000000035e1d4983d22236a300000000000000000000000000000000000000000000000d582cea9b0c3649bd",
        "logIndex": 312,
        "blockHash": "0xa2cc5a4352eb89ead9d472a7a90fd9de8590b34876a64dd047ffb496839a235d"
      }
    ],
    "blockNumber": 24437406,
    "cumulativeGasUsed": "13470832",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "1c6b3333970e403b0fb7d3bd2d8c68f7",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_wrapper\",\"type\":\"address\"}],\"name\":\"CreateWrapper\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_underlying\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_tokenInIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenOutIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"createWrapper\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/converters/ZeroCurveFactory.sol\":\"ZeroCurveFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/converters/ZeroCurveFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0<0.8.0;\\nimport {ICurvePool} from '../interfaces/ICurvePool.sol';\\nimport {IERC20} from 'oz410/token/ERC20/IERC20.sol';\\nimport {ZeroCurveWrapper} from './ZeroCurveWrapper.sol';\\nimport {ICurveInt128} from '../interfaces/CurvePools/ICurveInt128.sol';\\nimport {ICurveInt256} from '../interfaces/CurvePools/ICurveInt256.sol';\\nimport {ICurveUInt128} from '../interfaces/CurvePools/ICurveUInt128.sol';\\nimport {ICurveUInt256} from '../interfaces/CurvePools/ICurveUInt256.sol';\\nimport {ICurveUnderlyingInt128} from '../interfaces/CurvePools/ICurveUnderlyingInt128.sol';\\nimport {ICurveUnderlyingInt256} from '../interfaces/CurvePools/ICurveUnderlyingInt256.sol';\\nimport {ICurveUnderlyingUInt128} from '../interfaces/CurvePools/ICurveUnderlyingUInt128.sol';\\nimport {ICurveUnderlyingUInt256} from '../interfaces/CurvePools/ICurveUnderlyingUInt256.sol';\\nimport {CurveLib} from '../libraries/CurveLib.sol';\\n\\ncontract ZeroCurveFactory {\\n\\tevent CreateWrapper(address _wrapper);\\n\\n\\tfunction createWrapper(\\n\\t\\tbool _underlying,\\n\\t\\tuint256 _tokenInIndex,\\n\\t\\tuint256 _tokenOutIndex,\\n\\t\\taddress _pool\\n\\t) public payable {\\n\\t\\temit CreateWrapper(address(new ZeroCurveWrapper(_tokenInIndex, _tokenOutIndex, _pool, _underlying)));\\n\\t}\\n\\n\\tfallback() external payable {\\n\\t\\t/* no op */\\n\\t}\\n}\\n\",\"keccak256\":\"0x3006a5a5bb493dcf629b63d56f0f902dd1c7c05febb609bc7a4684a98582438f\",\"license\":\"MIT\"},\"contracts/converters/ZeroCurveWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0<0.8.0;\\n\\nimport {IERC20} from 'oz410/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from 'oz410/token/ERC20/SafeERC20.sol';\\nimport {ICurvePool} from '../interfaces/ICurvePool.sol';\\nimport {CurveLib} from '../libraries/CurveLib.sol';\\nimport {SafeMath} from 'oz410/math/SafeMath.sol';\\n\\ncontract ZeroCurveWrapper {\\n\\tbool public immutable underlying;\\n\\tuint256 public immutable tokenInIndex;\\n\\tuint256 public immutable tokenOutIndex;\\n\\taddress public immutable tokenInAddress;\\n\\taddress public immutable tokenOutAddress;\\n\\taddress public immutable pool;\\n\\tbytes4 public immutable coinsUnderlyingSelector;\\n\\tbytes4 public immutable coinsSelector;\\n\\tbytes4 public immutable getDySelector;\\n\\tbytes4 public immutable exchangeSelector;\\n\\n\\tusing SafeMath for uint256;\\n\\tusing SafeERC20 for IERC20;\\n\\tusing CurveLib for CurveLib.ICurve;\\n\\n\\tfunction getPool() internal view returns (CurveLib.ICurve memory result) {\\n\\t\\tresult = CurveLib.fromSelectors(\\n\\t\\t\\tpool,\\n\\t\\t\\tunderlying,\\n\\t\\t\\tcoinsSelector,\\n\\t\\t\\tcoinsUnderlyingSelector,\\n\\t\\t\\texchangeSelector,\\n\\t\\t\\tgetDySelector\\n\\t\\t);\\n\\t}\\n\\n\\tconstructor(\\n\\t\\tuint256 _tokenInIndex,\\n\\t\\tuint256 _tokenOutIndex,\\n\\t\\taddress _pool,\\n\\t\\tbool _underlying\\n\\t) {\\n\\t\\tunderlying = _underlying;\\n\\t\\ttokenInIndex = _tokenInIndex;\\n\\t\\ttokenOutIndex = _tokenOutIndex;\\n\\t\\tpool = _pool;\\n\\t\\tCurveLib.ICurve memory curve = CurveLib.duckPool(_pool, _underlying);\\n\\t\\tcoinsUnderlyingSelector = curve.coinsUnderlyingSelector;\\n\\t\\tcoinsSelector = curve.coinsSelector;\\n\\t\\texchangeSelector = curve.exchangeSelector;\\n\\t\\tgetDySelector = curve.getDySelector;\\n\\t\\taddress _tokenInAddress = tokenInAddress = curve.coins(_tokenInIndex);\\n\\t\\taddress _tokenOutAddress = tokenOutAddress = curve.coins(_tokenOutIndex);\\n\\t\\tIERC20(_tokenInAddress).safeApprove(_pool, type(uint256).max / 2);\\n\\t}\\n\\n\\tfunction estimate(uint256 _amount) public returns (uint256 result) {\\n\\t\\tresult = getPool().get_dy(tokenInIndex, tokenOutIndex, _amount);\\n\\t}\\n\\n\\tfunction convert(address _module) external payable returns (uint256 _actualOut) {\\n\\t\\tuint256 _balance = IERC20(tokenInAddress).balanceOf(address(this));\\n\\t\\tuint256 _startOut = IERC20(tokenOutAddress).balanceOf(address(this));\\n\\t\\tgetPool().exchange(tokenInIndex, tokenOutIndex, _balance, _balance / 0x10);\\n\\t\\t_actualOut = IERC20(tokenOutAddress).balanceOf(address(this)) - _startOut;\\n\\t\\tIERC20(tokenOutAddress).safeTransfer(msg.sender, _actualOut);\\n\\t}\\n\\n\\treceive() external payable {\\n\\t\\t/* noop */\\n\\t}\\n\\n\\tfallback() external payable {\\n\\t\\t/* noop */\\n\\t}\\n}\\n\",\"keccak256\":\"0x65b9896e438a538b888bdc2d087853cd2692a7bba8832cbb5f3c4da3408eca71\",\"license\":\"MIT\"},\"contracts/interfaces/CurvePools/ICurveETHUInt256.sol\":{\"content\":\"pragma solidity >=0.6.0<0.8.0;\\n\\ninterface ICurveETHUInt256 {\\n\\tfunction exchange(\\n\\t\\tuint256 i,\\n\\t\\tuint256 j,\\n\\t\\tuint256 dx,\\n\\t\\tuint256 min_dy,\\n\\t\\tbool use_eth\\n\\t) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x1dba454362f0003af49bbea8d4a3f69f6d1a0dd11d35c08a555f96763c7f84aa\"},\"contracts/interfaces/CurvePools/ICurveInt128.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0<0.8.0;\\n\\ninterface ICurveInt128 {\\n\\tfunction get_dy(\\n\\t\\tint128,\\n\\t\\tint128,\\n\\t\\tuint256\\n\\t) external view returns (uint256);\\n\\n\\tfunction exchange(\\n\\t\\tint128,\\n\\t\\tint128,\\n\\t\\tuint256,\\n\\t\\tuint256\\n\\t) external returns (uint256);\\n\\n\\tfunction coins(int128) external view returns (address);\\n}\\n\",\"keccak256\":\"0x2b2a131893d6b77de1def69d3d7123f5d33d3efb29ef11ee1f73bec7f5a95a70\",\"license\":\"MIT\"},\"contracts/interfaces/CurvePools/ICurveInt256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0<0.8.0;\\n\\ninterface ICurveInt256 {\\n\\tfunction get_dy(\\n\\t\\tint256,\\n\\t\\tint256,\\n\\t\\tuint256\\n\\t) external view returns (uint256);\\n\\n\\tfunction exchange(\\n\\t\\tint256,\\n\\t\\tint256,\\n\\t\\tuint256,\\n\\t\\tuint256\\n\\t) external returns (uint256);\\n\\n\\tfunction coins(int256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x8177335e494fe31be3b101cb556ee141dc4a4e646ff18a9592b2316ee924b2d5\",\"license\":\"MIT\"},\"contracts/interfaces/CurvePools/ICurveUInt128.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0<0.8.0;\\n\\ninterface ICurveUInt128 {\\n\\tfunction get_dy(\\n\\t\\tuint128,\\n\\t\\tuint128,\\n\\t\\tuint256\\n\\t) external view returns (uint256);\\n\\n\\tfunction exchange(\\n\\t\\tuint128,\\n\\t\\tuint128,\\n\\t\\tuint256,\\n\\t\\tuint256\\n\\t) external returns (uint256);\\n\\n\\tfunction coins(uint128) external view returns (address);\\n}\\n\",\"keccak256\":\"0x7e9ec06d5cd8481471c25dba2c530c4455cf6cbd9736e44ac8924904135e774b\",\"license\":\"MIT\"},\"contracts/interfaces/CurvePools/ICurveUInt256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0<0.8.0;\\n\\ninterface ICurveUInt256 {\\n\\tfunction get_dy(\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256\\n\\t) external view returns (uint256);\\n\\n\\tfunction exchange(\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256\\n\\t) external returns (uint256);\\n\\n\\tfunction coins(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x7e3474d0ac259b67a78cb09d44fc270666d0dfa47a1c439504220515a1cf9762\",\"license\":\"MIT\"},\"contracts/interfaces/CurvePools/ICurveUnderlyingInt128.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0<0.8.0;\\n\\ninterface ICurveUnderlyingInt128 {\\n\\tfunction get_dy_underlying(\\n\\t\\tint128,\\n\\t\\tint128,\\n\\t\\tuint256\\n\\t) external view returns (uint256);\\n\\n\\tfunction exchange_underlying(\\n\\t\\tint128,\\n\\t\\tint128,\\n\\t\\tuint256,\\n\\t\\tuint256\\n\\t) external returns (uint256);\\n\\n\\tfunction underlying_coins(int128) external view returns (address);\\n}\\n\",\"keccak256\":\"0x3c677740efc3308ba24562d95e0a9cb1f82e47ce92d5e9c41d8b0da3e9dd272c\",\"license\":\"MIT\"},\"contracts/interfaces/CurvePools/ICurveUnderlyingInt256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0<0.8.0;\\n\\ninterface ICurveUnderlyingInt256 {\\n\\tfunction get_dy_underlying(\\n\\t\\tint256,\\n\\t\\tint256,\\n\\t\\tuint256\\n\\t) external view returns (uint256);\\n\\n\\tfunction exchange_underlying(\\n\\t\\tint256,\\n\\t\\tint256,\\n\\t\\tuint256,\\n\\t\\tuint256\\n\\t) external returns (uint256);\\n\\n\\tfunction underlying_coins(int256) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc0fcfea340a5c3f76c040bd1566d12b5cf8d39ca6ec20273b2796f5f4de386fe\",\"license\":\"MIT\"},\"contracts/interfaces/CurvePools/ICurveUnderlyingUInt128.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0<0.8.0;\\n\\ninterface ICurveUnderlyingUInt128 {\\n\\tfunction get_dy_underlying(\\n\\t\\tuint128,\\n\\t\\tuint128,\\n\\t\\tuint256\\n\\t) external view returns (uint256);\\n\\n\\tfunction exchange_underlying(\\n\\t\\tuint128,\\n\\t\\tuint128,\\n\\t\\tuint256,\\n\\t\\tuint256\\n\\t) external returns (uint256);\\n\\n\\tfunction underlying_coins(uint128) external view returns (address);\\n}\\n\",\"keccak256\":\"0x5bc8288d30b0534ec4a4d58917b1535e604d237ec0f2240b2017f3bc4ba05f1d\",\"license\":\"MIT\"},\"contracts/interfaces/CurvePools/ICurveUnderlyingUInt256.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0<0.8.0;\\n\\ninterface ICurveUnderlyingUInt256 {\\n\\tfunction get_dy_underlying(\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256\\n\\t) external view returns (uint256);\\n\\n\\tfunction exchange_underlying(\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256\\n\\t) external returns (uint256);\\n\\n\\tfunction underlying_coins(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0xf0a95ff186a12f1d8dcd473905b6d61ece668f605e9cdd9d713ee8af071e69f5\",\"license\":\"MIT\"},\"contracts/interfaces/ICurvePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0<0.8.0;\\n\\ninterface ICurvePool {\\n\\tfunction get_dy(\\n\\t\\tint128,\\n\\t\\tint128,\\n\\t\\tuint256\\n\\t) external view returns (uint256);\\n\\n\\tfunction get_dy(\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256\\n\\t) external view returns (uint256);\\n\\n\\tfunction get_dy_underlying(\\n\\t\\tint128,\\n\\t\\tint128,\\n\\t\\tuint256\\n\\t) external view returns (uint256);\\n\\n\\tfunction get_dy_underlying(\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256\\n\\t) external view returns (uint256);\\n\\n\\tfunction exchange(\\n\\t\\tint128,\\n\\t\\tint128,\\n\\t\\tuint256,\\n\\t\\tuint256\\n\\t) external;\\n\\n\\tfunction exchange(\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256\\n\\t) external;\\n\\n\\tfunction exchange_underlying(\\n\\t\\tint128,\\n\\t\\tint128,\\n\\t\\tuint256,\\n\\t\\tuint256\\n\\t) external;\\n\\n\\tfunction exchange_underlying(\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256,\\n\\t\\tuint256\\n\\t) external;\\n\\n\\tfunction coins(int128) external view returns (address);\\n\\n\\tfunction coins(int256) external view returns (address);\\n\\n\\tfunction coins(uint128) external view returns (address);\\n\\n\\tfunction coins(uint256) external view returns (address);\\n\\n\\tfunction underlying_coins(int128) external view returns (address);\\n\\n\\tfunction underlying_coins(uint128) external view returns (address);\\n\\n\\tfunction underlying_coins(int256) external view returns (address);\\n\\n\\tfunction underlying_coins(uint256) external view returns (address);\\n}\\n\",\"keccak256\":\"0x934fac42ce2f26f0891caf66bfcbae0b7916a5dc2ee0b24a002b548ea3ed8382\",\"license\":\"MIT\"},\"contracts/libraries/CurveLib.sol\":{\"content\":\"pragma solidity >=0.6.0<0.8.0;\\n\\nimport {ICurveInt128} from '../interfaces/CurvePools/ICurveInt128.sol';\\nimport {ICurveUInt128} from '../interfaces/CurvePools/ICurveUInt128.sol';\\n\\nimport {ICurveInt256} from '../interfaces/CurvePools/ICurveInt256.sol';\\n\\nimport {ICurveUInt256} from '../interfaces/CurvePools/ICurveUInt256.sol';\\nimport {ICurveETHUInt256} from '../interfaces/CurvePools/ICurveETHUInt256.sol';\\nimport {ICurveUnderlyingUInt128} from '../interfaces/CurvePools/ICurveUnderlyingUInt128.sol';\\nimport {ICurveUnderlyingUInt256} from '../interfaces/CurvePools/ICurveUnderlyingUInt256.sol';\\nimport {ICurveUnderlyingInt128} from '../interfaces/CurvePools/ICurveUnderlyingInt128.sol';\\nimport {ICurveUnderlyingInt256} from '../interfaces/CurvePools/ICurveUnderlyingInt256.sol';\\nimport {RevertCaptureLib} from './RevertCaptureLib.sol';\\n\\nlibrary CurveLib {\\n\\taddress constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\tstruct ICurve {\\n\\t\\taddress pool;\\n\\t\\tbool underlying;\\n\\t\\tbytes4 coinsSelector;\\n\\t\\tbytes4 exchangeSelector;\\n\\t\\tbytes4 getDySelector;\\n\\t\\tbytes4 coinsUnderlyingSelector;\\n\\t}\\n\\n\\tfunction hasWETH(address pool, bytes4 coinsSelector) internal returns (bool) {\\n\\t\\tfor (uint256 i = 0; ; i++) {\\n\\t\\t\\t(bool success, bytes memory result) = pool.staticcall{gas: 2e5}(abi.encodePacked(coinsSelector, i));\\n\\t\\t\\tif (!success || result.length == 0) return false;\\n\\t\\t\\taddress coin = abi.decode(result, (address));\\n\\t\\t\\tif (coin == weth) return true;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction coins(ICurve memory curve, uint256 i) internal view returns (address result) {\\n\\t\\t(bool success, bytes memory returnData) = curve.pool.staticcall(abi.encodeWithSelector(curve.coinsSelector, i));\\n\\t\\trequire(success, '!coins');\\n\\t\\t(result) = abi.decode(returnData, (address));\\n\\t}\\n\\n\\tfunction underlying_coins(ICurve memory curve, uint256 i) internal view returns (address result) {\\n\\t\\t(bool success, bytes memory returnData) = curve.pool.staticcall(\\n\\t\\t\\tabi.encodeWithSelector(curve.coinsUnderlyingSelector, i)\\n\\t\\t);\\n\\t\\trequire(success, '!underlying_coins');\\n\\t\\t(result) = abi.decode(returnData, (address));\\n\\t}\\n\\n\\tfunction get_dy(\\n\\t\\tICurve memory curve,\\n\\t\\tuint256 i,\\n\\t\\tuint256 j,\\n\\t\\tuint256 amount\\n\\t) internal view returns (uint256 result) {\\n\\t\\t(bool success, bytes memory returnData) = curve.pool.staticcall(\\n\\t\\t\\tabi.encodeWithSelector(curve.getDySelector, i, j, amount)\\n\\t\\t);\\n\\t\\trequire(success, '!get_dy');\\n\\t\\t(result) = abi.decode(returnData, (uint256));\\n\\t}\\n\\n\\tfunction exchange(\\n\\t\\tICurve memory curve,\\n\\t\\tuint256 i,\\n\\t\\tuint256 j,\\n\\t\\tuint256 dx,\\n\\t\\tuint256 min_dy\\n\\t) internal {\\n\\t\\t(bool success, bytes memory returnData) = curve.pool.call{gas: gasleft()}(\\n\\t\\t\\tabi.encodeWithSelector(curve.exchangeSelector, i, j, dx, min_dy)\\n\\t\\t);\\n\\t\\tif (!success) revert(RevertCaptureLib.decodeError(returnData));\\n\\t}\\n\\n\\tfunction toDynamic(bytes4[4] memory ary) internal pure returns (bytes4[] memory result) {\\n\\t\\tresult = new bytes4[](ary.length);\\n\\t\\tfor (uint256 i = 0; i < ary.length; i++) {\\n\\t\\t\\tresult[i] = ary[i];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction toDynamic(bytes4[5] memory ary) internal pure returns (bytes4[] memory result) {\\n\\t\\tresult = new bytes4[](ary.length);\\n\\t\\tfor (uint256 i = 0; i < ary.length; i++) {\\n\\t\\t\\tresult[i] = ary[i];\\n\\t\\t}\\n\\t}\\n\\n\\tfunction testSignatures(\\n\\t\\taddress target,\\n\\t\\tbytes4[] memory signatures,\\n\\t\\tbytes memory callData\\n\\t) internal returns (bytes4 result) {\\n\\t\\tfor (uint256 i = 0; i < signatures.length; i++) {\\n\\t\\t\\t(, bytes memory returnData) = target.staticcall(abi.encodePacked(signatures[i], callData));\\n\\t\\t\\tif (returnData.length != 0) return signatures[i];\\n\\t\\t}\\n\\t\\treturn bytes4(0x0);\\n\\t}\\n\\n\\tfunction testExchangeSignatures(\\n\\t\\taddress target,\\n\\t\\tbytes4[] memory signatures,\\n\\t\\tbytes memory callData\\n\\t) internal returns (bytes4 result) {\\n\\t\\tfor (uint256 i = 0; i < signatures.length; i++) {\\n\\t\\t\\tuint256 gasStart = gasleft();\\n\\t\\t\\t(bool success, ) = target.call{gas: 2e5}(abi.encodePacked(signatures[i], callData));\\n\\t\\t\\tuint256 gasUsed = gasStart - gasleft();\\n\\t\\t\\tif (gasUsed > 10000) return signatures[i];\\n\\t\\t}\\n\\t\\treturn bytes4(0x0);\\n\\t}\\n\\n\\tfunction toBytes(bytes4 sel) internal pure returns (bytes memory result) {\\n\\t\\tresult = new bytes(4);\\n\\t\\tbytes32 selWord = bytes32(sel);\\n\\t\\tassembly {\\n\\t\\t\\tmstore(add(0x20, result), selWord)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction duckPool(address pool, bool underlying) internal returns (ICurve memory result) {\\n\\t\\tresult.pool = pool;\\n\\t\\tresult.underlying = underlying;\\n\\t\\tresult.coinsSelector = result.underlying\\n\\t\\t\\t? testSignatures(\\n\\t\\t\\t\\tpool,\\n\\t\\t\\t\\ttoDynamic(\\n\\t\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t\\tICurveUnderlyingInt128.underlying_coins.selector,\\n\\t\\t\\t\\t\\t\\tICurveUnderlyingInt256.underlying_coins.selector,\\n\\t\\t\\t\\t\\t\\tICurveUnderlyingUInt128.underlying_coins.selector,\\n\\t\\t\\t\\t\\t\\tICurveUnderlyingUInt256.underlying_coins.selector\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tabi.encode(0)\\n\\t\\t\\t)\\n\\t\\t\\t: testSignatures(\\n\\t\\t\\t\\tpool,\\n\\t\\t\\t\\ttoDynamic(\\n\\t\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t\\tICurveInt128.coins.selector,\\n\\t\\t\\t\\t\\t\\tICurveInt256.coins.selector,\\n\\t\\t\\t\\t\\t\\tICurveUInt128.coins.selector,\\n\\t\\t\\t\\t\\t\\tICurveUInt256.coins.selector\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tabi.encode(0)\\n\\t\\t\\t);\\n\\t\\tresult.exchangeSelector = result.underlying\\n\\t\\t\\t? testExchangeSignatures(\\n\\t\\t\\t\\tpool,\\n\\t\\t\\t\\ttoDynamic(\\n\\t\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t\\tICurveUnderlyingUInt256.exchange_underlying.selector,\\n\\t\\t\\t\\t\\t\\tICurveUnderlyingInt128.exchange_underlying.selector,\\n\\t\\t\\t\\t\\t\\tICurveUnderlyingInt256.exchange_underlying.selector,\\n\\t\\t\\t\\t\\t\\tICurveUnderlyingUInt128.exchange_underlying.selector\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tabi.encode(0, 0, 1000000000, type(uint256).max / 0x10, false)\\n\\t\\t\\t)\\n\\t\\t\\t: testExchangeSignatures(\\n\\t\\t\\t\\tpool,\\n\\t\\t\\t\\ttoDynamic(\\n\\t\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t\\tICurveUInt256.exchange.selector,\\n\\t\\t\\t\\t\\t\\tICurveInt128.exchange.selector,\\n\\t\\t\\t\\t\\t\\tICurveInt256.exchange.selector,\\n\\t\\t\\t\\t\\t\\tICurveUInt128.exchange.selector,\\n\\t\\t\\t\\t\\t\\tICurveETHUInt256.exchange.selector\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t),\\n\\t\\t\\t\\tabi.encode(0, 0, 1000000000, type(uint256).max / 0x10, false)\\n\\t\\t\\t);\\n\\t\\tif (result.exchangeSelector == bytes4(0x0)) result.exchangeSelector = ICurveUInt256.exchange.selector; //hasWETH(pool, result.coinsSelector) ? ICurveETHUInt256.exchange.selector : ICurveUInt256.exchange.selector;\\n\\t\\tresult.getDySelector = testSignatures(\\n\\t\\t\\tpool,\\n\\t\\t\\ttoDynamic(\\n\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\tICurveInt128.get_dy.selector,\\n\\t\\t\\t\\t\\tICurveInt256.get_dy.selector,\\n\\t\\t\\t\\t\\tICurveUInt128.get_dy.selector,\\n\\t\\t\\t\\t\\tICurveUInt256.get_dy.selector\\n\\t\\t\\t\\t]\\n\\t\\t\\t),\\n\\t\\t\\tabi.encode(0, 1, 1000000000)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction fromSelectors(\\n\\t\\taddress pool,\\n\\t\\tbool underlying,\\n\\t\\tbytes4 coinsSelector,\\n\\t\\tbytes4 coinsUnderlyingSelector,\\n\\t\\tbytes4 exchangeSelector,\\n\\t\\tbytes4 getDySelector\\n\\t) internal pure returns (ICurve memory result) {\\n\\t\\tresult.pool = pool;\\n\\t\\tresult.coinsSelector = coinsSelector;\\n\\t\\tresult.coinsUnderlyingSelector = coinsUnderlyingSelector;\\n\\t\\tresult.exchangeSelector = exchangeSelector;\\n\\t\\tresult.getDySelector = getDySelector;\\n\\t}\\n}\\n\",\"keccak256\":\"0x719d98b969b99f020150d87a892e2c4db909f51ce57043cc49f0a2e9f5865a15\"},\"contracts/libraries/MemcpyLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0<0.8.0;\\n\\nlibrary MemcpyLib {\\n\\tfunction memcpy(\\n\\t\\tbytes32 dest,\\n\\t\\tbytes32 src,\\n\\t\\tuint256 len\\n\\t) internal pure {\\n\\t\\tassembly {\\n\\t\\t\\tfor {\\n\\n\\t\\t\\t} iszero(lt(len, 0x20)) {\\n\\t\\t\\t\\tlen := sub(len, 0x20)\\n\\t\\t\\t} {\\n\\t\\t\\t\\tmstore(dest, mload(src))\\n\\t\\t\\t\\tdest := add(dest, 0x20)\\n\\t\\t\\t\\tsrc := add(src, 0x20)\\n\\t\\t\\t}\\n\\t\\t\\tlet mask := sub(shl(mul(sub(32, len), 8), 1), 1)\\n\\t\\t\\tmstore(dest, or(and(mload(src), not(mask)), and(mload(dest), mask)))\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xc8d6e04965adf1d25b31aaceb1480333ee809d90b66230bad1e88240df60daba\",\"license\":\"MIT\"},\"contracts/libraries/RevertCaptureLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0<0.8.0;\\n\\nimport {SliceLib} from './SliceLib.sol';\\n\\nlibrary RevertCaptureLib {\\n\\tusing SliceLib for *;\\n\\tuint32 constant REVERT_WITH_REASON_MAGIC = 0x08c379a0; // keccak256(\\\"Error(string)\\\")\\n\\n\\tfunction decodeString(bytes memory input) internal pure returns (string memory retval) {\\n\\t\\t(retval) = abi.decode(input, (string));\\n\\t}\\n\\n\\tfunction decodeError(bytes memory buffer) internal pure returns (string memory) {\\n\\t\\tif (buffer.length == 0) return 'captured empty revert buffer';\\n\\t\\tif (uint32(uint256(bytes32(buffer.toSlice(0, 4).asWord()))) != REVERT_WITH_REASON_MAGIC)\\n\\t\\t\\treturn \\\"captured a revert error, but it doesn't conform to the standard\\\";\\n\\t\\tbytes memory revertMessageEncoded = buffer.toSlice(4).copy();\\n\\t\\tif (revertMessageEncoded.length == 0) return 'captured empty revert message';\\n\\t\\tstring memory revertMessage = decodeString(revertMessageEncoded);\\n\\t\\treturn revertMessage;\\n\\t}\\n}\\n\",\"keccak256\":\"0x190d2583b1e9b2ffaaa8dc0f0a0cb0839a143b67d07625bfaa452829ab9627d0\",\"license\":\"MIT\"},\"contracts/libraries/SliceLib.sol\":{\"content\":\"pragma experimental ABIEncoderV2;\\n// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0<0.8.0;\\n\\nimport {MemcpyLib} from './MemcpyLib.sol';\\n\\nlibrary SliceLib {\\n\\tstruct Slice {\\n\\t\\tuint256 data;\\n\\t\\tuint256 length;\\n\\t\\tuint256 offset;\\n\\t}\\n\\n\\tfunction toPtr(bytes memory input, uint256 offset) internal pure returns (uint256 data) {\\n\\t\\tassembly {\\n\\t\\t\\tdata := add(input, add(offset, 0x20))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction toSlice(\\n\\t\\tbytes memory input,\\n\\t\\tuint256 offset,\\n\\t\\tuint256 length\\n\\t) internal pure returns (Slice memory retval) {\\n\\t\\tretval.data = toPtr(input, offset);\\n\\t\\tretval.length = length;\\n\\t\\tretval.offset = offset;\\n\\t}\\n\\n\\tfunction toSlice(bytes memory input) internal pure returns (Slice memory) {\\n\\t\\treturn toSlice(input, 0);\\n\\t}\\n\\n\\tfunction toSlice(bytes memory input, uint256 offset) internal pure returns (Slice memory) {\\n\\t\\tif (input.length < offset) offset = input.length;\\n\\t\\treturn toSlice(input, offset, input.length - offset);\\n\\t}\\n\\n\\tfunction toSlice(\\n\\t\\tSlice memory input,\\n\\t\\tuint256 offset,\\n\\t\\tuint256 length\\n\\t) internal pure returns (Slice memory) {\\n\\t\\treturn Slice({data: input.data + offset, offset: input.offset + offset, length: length});\\n\\t}\\n\\n\\tfunction toSlice(Slice memory input, uint256 offset) internal pure returns (Slice memory) {\\n\\t\\treturn toSlice(input, offset, input.length - offset);\\n\\t}\\n\\n\\tfunction toSlice(Slice memory input) internal pure returns (Slice memory) {\\n\\t\\treturn toSlice(input, 0);\\n\\t}\\n\\n\\tfunction maskLastByteOfWordAt(uint256 data) internal pure returns (uint8 lastByte) {\\n\\t\\tassembly {\\n\\t\\t\\tlastByte := and(mload(data), 0xff)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction get(Slice memory slice, uint256 index) internal pure returns (bytes1 result) {\\n\\t\\treturn bytes1(maskLastByteOfWordAt(slice.data - 0x1f + index));\\n\\t}\\n\\n\\tfunction setByteAt(uint256 ptr, uint8 value) internal pure {\\n\\t\\tassembly {\\n\\t\\t\\tmstore8(ptr, value)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction set(\\n\\t\\tSlice memory slice,\\n\\t\\tuint256 index,\\n\\t\\tuint8 value\\n\\t) internal pure {\\n\\t\\tsetByteAt(slice.data + index, value);\\n\\t}\\n\\n\\tfunction wordAt(uint256 ptr, uint256 length) internal pure returns (bytes32 word) {\\n\\t\\tassembly {\\n\\t\\t\\tlet mask := sub(shl(mul(length, 0x8), 0x1), 0x1)\\n\\t\\t\\tword := and(mload(sub(ptr, sub(0x20, length))), mask)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction asWord(Slice memory slice) internal pure returns (bytes32 word) {\\n\\t\\tuint256 data = slice.data;\\n\\t\\tuint256 length = slice.length;\\n\\t\\treturn wordAt(data, length);\\n\\t}\\n\\n\\tfunction toDataStart(bytes memory input) internal pure returns (bytes32 start) {\\n\\t\\tassembly {\\n\\t\\t\\tstart := add(input, 0x20)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction copy(Slice memory slice) internal pure returns (bytes memory retval) {\\n\\t\\tuint256 length = slice.length;\\n\\t\\tretval = new bytes(length);\\n\\t\\tbytes32 src = bytes32(slice.data);\\n\\t\\tbytes32 dest = toDataStart(retval);\\n\\t\\tMemcpyLib.memcpy(dest, src, length);\\n\\t}\\n\\n\\tfunction keccakAt(uint256 data, uint256 length) internal pure returns (bytes32 result) {\\n\\t\\tassembly {\\n\\t\\t\\tresult := keccak256(data, length)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction toKeccak(Slice memory slice) internal pure returns (bytes32 result) {\\n\\t\\treturn keccakAt(slice.data, slice.length);\\n\\t}\\n}\\n\",\"keccak256\":\"0x29a463d2d7c18e7ac7d9e007d13e504847f010b1e74bda58aab2ce922e9caff3\",\"license\":\"MIT\"},\"oz410/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"oz410/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"oz410/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"oz410/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612afe806100206000396000f3fe60806040526004361061001e5760003560e01c80637d8b525314610020575b005b61001e6004803603608081101561003657600080fd5b508035151590602081013590604081013590606001356001600160a01b03167f729bbe2c9703a1bd3cf2ce66444473a305404e4080924c1e3068becdc1a3e0b183838387604051610086906100eb565b93845260208401929092526001600160a01b031660408084019190915290151560608301525190819003608001906000f0801580156100c9573d6000803e3d6000fd5b50604080516001600160a01b039092168252519081900360200190a150505050565b6129d0806100f98339019056fe6101c06040523480156200001257600080fd5b50604051620029d0380380620029d0833981810160405260808110156200003857600080fd5b508051602080830151604084015160609485015180151560f81b60805260a085905260c08390529481901b6001600160601b03191661012052929390929160009062000091908490849062000170811b6200066417901c565b60a08101516001600160e01b0319908116610140526040820151811661016052606082015181166101a0526080820151166101805290506000620000e282876200043a602090811b6200090f17901c565b6001600160a01b031660e0816001600160a01b031660601b815250905060006200011b86846200043a60201b6200090f1790919060201c565b6001600160601b0319606082901b16610100526001600160a01b031690506200016385600260001904846001600160a01b03166200059060201b62000a5f179092919060201c565b5050505050505062000dd2565b6200017a62000d9d565b6001600160a01b03831681528115156020820181905262000217576040805160808101825263046e8dd760e31b8152632a77a7b760e11b6020820152630331952960e51b9181019190915263c661065760e01b606082015262000211908490620001e490620006b4565b6000604051602001808281526020019150506040516020818303038152906040526200072b60201b60201c565b62000266565b60408051608081018252635b9cca9f60e11b815263b62f2cd360e01b6020820152631654775560e21b91810191909152630b9947eb60e41b606082015262000266908490620001e490620006b4565b6001600160e01b031916604082015260208101516200032c576040805160a081018252630b68372160e31b8152630f7c084960e21b6020820152631fc5330960e11b918101919091526374aee29160e11b606082015263394747c560e01b608082015262000326908490620002db90620008b0565b60408051600060208201819052818301819052633b9aca0060608301526001600160fc1b03608083015260a0808301919091528251808303909101815260c090910190915262000921565b6200037b565b604080516080810182526365b2489b60e01b8152635320bf6b60e11b6020820152634c9d2b6760e01b918101919091526309ac9b6d60e31b60608201526200037b908490620002db90620006b4565b6001600160e01b031916606082018190526200039f57630b68372160e31b60608201525b60408051608081018252635e0d443f60e01b815263024a81eb60e41b60208201526357d42f1b60e01b9181019190915263556d6e9f60e01b606082015262000425908490620003ee90620006b4565b6040805160006020820152600181830152633b9aca006060808301919091528251808303909101815260809091019091526200072b565b6001600160e01b031916608082015292915050565b600080600084600001516001600160a01b031685604001518560405160240180828152602001915050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050506040518082805190602001908083835b60208310620004c75780518252601f199092019160209182019101620004a6565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811462000529576040519150601f19603f3d011682016040523d82523d6000602084013e6200052e565b606091505b5091509150816200056f576040805162461bcd60e51b815260206004820152600660248201526521636f696e7360d01b604482015290519081900360640190fd5b8080602001905160208110156200058557600080fd5b505195945050505050565b8015806200061a575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015620005ea57600080fd5b505afa158015620005ff573d6000803e3d6000fd5b505050506040513d60208110156200061657600080fd5b5051155b620006575760405162461bcd60e51b81526004018080602001828103825260368152602001806200299a6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620006af91859162000ab116565b505050565b60408051600480825260a082019092526060916020820160808036833701905050905060005b60048110156200072557828160048110620006f157fe5b60200201518282815181106200070357fe5b6001600160e01b031990921660209283029190910190910152600101620006da565b50919050565b6000805b8351811015620008a3576000856001600160a01b03168583815181106200075257fe5b60200260200101518560405160200180836001600160e01b031916815260040182805190602001908083835b602083106200079f5780518252601f1990920191602091820191016200077e565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b60208310620008055780518252601f199092019160209182019101620007e4565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811462000867576040519150601f19603f3d011682016040523d82523d6000602084013e6200086c565b606091505b50915050805160001462000899578482815181106200088757fe5b602002602001015192505050620008a9565b506001016200072f565b50600090505b9392505050565b60408051600580825260c082019092526060916020820160a08036833701905050905060005b60058110156200072557828160058110620008ed57fe5b6020020151828281518110620008ff57fe5b6001600160e01b031990921660209283029190910190910152600101620008d6565b6000805b8351811015620008a35760005a90506000866001600160a01b031662030d408785815181106200095157fe5b60200260200101518760405160200180836001600160e01b031916815260040182805190602001908083835b602083106200099e5780518252601f1990920191602091820191016200097d565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b6020831062000a045780518252601f199092019160209182019101620009e3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038160008787f1925050503d806000811462000a69576040519150601f19603f3d011682016040523d82523d6000602084013e62000a6e565b606091505b5050905060005a8303905061271081111562000aa55786848151811062000a9157fe5b6020026020010151945050505050620008a9565b50505060010162000925565b600062000b0d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031662000b6d60201b62000b77179092919060201c565b805190915015620006af5780806020019051602081101562000b2e57600080fd5b5051620006af5760405162461bcd60e51b815260040180806020018281038252602a81526020018062002970602a913960400191505060405180910390fd5b606062000b7e848460008562000b86565b949350505050565b60608247101562000bc95760405162461bcd60e51b81526004018080602001828103825260268152602001806200294a6026913960400191505060405180910390fd5b62000bd48562000ced565b62000c26576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b6020831062000c665780518252601f19909201916020918201910162000c45565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811462000cca576040519150601f19603f3d011682016040523d82523d6000602084013e62000ccf565b606091505b50909250905062000ce282828662000cf3565b979650505050505050565b3b151590565b6060831562000d04575081620008a9565b82511562000d155782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562000d6157818101518382015260200162000d47565b50505050905090810190601f16801562000d8f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b60805160f81c60a05160c05160e05160601c6101005160601c6101205160601c6101405160e01c60e01b6101605160e01c60e01b6101805160e01c60e01b6101a05160e01c60e01b611a9c62000eae6000398061030f5280610c215250806103b55280610c425250806102c75280610bdf5250806102eb5280610c0052508061027f5280610b9d5250806102375280610499528061056b528061061252508061025b52806103dc52508061035952806103915280610533525080610338528061051252806106425250806102a35280610bbe5250611a9c6000f3fe6080604052600436106100ab5760003560e01c806396b0c4191161006457806396b0c4191461017f5780639c79293814610194578063be8a97b7146101d0578063cc1a28b9146101e5578063def2489b146101fa578063f11cba4614610220576100b2565b8063083ab1b8146100b45780630bc66fdf146100e557806316f0115b146100fa5780636f307dc31461010f578063802b3b161461013857806382277ad61461016a576100b2565b366100b257005b005b3480156100c057600080fd5b506100c9610235565b604080516001600160a01b039092168252519081900360200190f35b3480156100f157600080fd5b506100c9610259565b34801561010657600080fd5b506100c961027d565b34801561011b57600080fd5b506101246102a1565b604080519115158252519081900360200190f35b34801561014457600080fd5b5061014d6102c5565b604080516001600160e01b03199092168252519081900360200190f35b34801561017657600080fd5b5061014d6102e9565b34801561018b57600080fd5b5061014d61030d565b3480156101a057600080fd5b506101be600480360360208110156101b757600080fd5b5035610331565b60408051918252519081900360200190f35b3480156101dc57600080fd5b506101be61038f565b3480156101f157600080fd5b5061014d6103b3565b6101be6004803603602081101561021057600080fd5b50356001600160a01b03166103d7565b34801561022c57600080fd5b506101be610640565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006103897f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084610381610b90565b929190610c6b565b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561044757600080fd5b505afa15801561045b573d6000803e3d6000fd5b505050506040513d602081101561047157600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b1580156104df57600080fd5b505afa1580156104f3573d6000803e3d6000fd5b505050506040513d602081101561050957600080fd5b505190506105687f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846010810461055f610b90565b93929190610dc5565b807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156105d657600080fd5b505afa1580156105ea573d6000803e3d6000fd5b505050506040513d602081101561060057600080fd5b50510392506106396001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163385610f65565b5050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61066c611895565b6001600160a01b0383168152811515602082018190526106fd576040805160808101825263046e8dd760e31b8152632a77a7b760e11b6020820152630331952960e51b9181019190915263c661065760e01b60608201526106f89084906106d290610fb7565b60006040516020018082815260200191505060405160208183030381529060405261102a565b610749565b60408051608081018252635b9cca9f60e11b815263b62f2cd360e01b6020820152631654775560e21b91810191909152630b9947eb60e41b60608201526107499084906106d290610fb7565b6001600160e01b03191660408201526020810151610809576040805160a081018252630b68372160e31b8152630f7c084960e21b6020820152631fc5330960e11b918101919091526374aee29160e11b606082015263394747c560e01b60808201526108049084906107ba906111a1565b60408051600060208201819052818301819052633b9aca0060608301526001600160fc1b03608083015260a0808301919091528251808303909101815260c090910190915261120e565b610855565b604080516080810182526365b2489b60e01b8152635320bf6b60e11b6020820152634c9d2b6760e01b918101919091526309ac9b6d60e31b60608201526108559084906107ba90610fb7565b6001600160e01b0319166060820181905261087857630b68372160e31b60608201525b60408051608081018252635e0d443f60e01b815263024a81eb60e41b60208201526357d42f1b60e01b9181019190915263556d6e9f60e01b60608201526108fa9084906108c490610fb7565b6040805160006020820152600181830152633b9aca0060608083019190915282518083039091018152608090910190915261102a565b6001600160e01b031916608082015292915050565b600080600084600001516001600160a01b031685604001518560405160240180828152602001915050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050506040518082805190602001908083835b6020831061099a5780518252601f19909201916020918201910161097b565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d80600081146109fa576040519150601f19603f3d011682016040523d82523d6000602084013e6109ff565b606091505b509150915081610a3f576040805162461bcd60e51b815260206004820152600660248201526521636f696e7360d01b604482015290519081900360640190fd5b808060200190516020811015610a5457600080fd5b505195945050505050565b801580610ae5575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015610ab757600080fd5b505afa158015610acb573d6000803e3d6000fd5b505050506040513d6020811015610ae157600080fd5b5051155b610b205760405162461bcd60e51b8152600401808060200182810382526036815260200180611a316036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610b72908490611392565b505050565b6060610b868484600085611443565b90505b9392505050565b610b98611895565b610c667f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061159e565b905090565b83516080850151604080516024810187905260448101869052606480820186905282518083039091018152608490910182526020810180516001600160e01b03166001600160e01b031990941693909317835290518151600094859485946001600160a01b039092169391928291908083835b60208310610cfd5780518252601f199092019160209182019101610cde565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610d5d576040519150601f19603f3d011682016040523d82523d6000602084013e610d62565b606091505b509150915081610da3576040805162461bcd60e51b8152602060048201526007602482015266216765745f647960c81b604482015290519081900360640190fd5b808060200190516020811015610db857600080fd5b5051979650505050505050565b60008086600001516001600160a01b03165a606089015160408051602481018b9052604481018a90526064810189905260848082018990528251808303909101815260a490910182526020810180516001600160e01b03166001600160e01b031990941693909317835290518151919290918291908083835b60208310610e5d5780518252601f199092019160209182019101610e3e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038160008787f1925050503d8060008114610ec0576040519150601f19603f3d011682016040523d82523d6000602084013e610ec5565b606091505b509150915081610f5c57610ed8816115dd565b60405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610f21578181015183820152602001610f09565b50505050905090810190601f168015610f4e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610b72908490611392565b60408051600480825260a082019092526060916020820160808036833701905050905060005b600481101561102457828160048110610ff257fe5b602002015182828151811061100357fe5b6001600160e01b031990921660209283029190910190910152600101610fdd565b50919050565b6000805b8351811015611196576000856001600160a01b031685838151811061104f57fe5b60200260200101518560405160200180836001600160e01b031916815260040182805190602001908083835b6020831061109a5780518252601f19909201916020918201910161107b565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b602083106110fe5780518252601f1990920191602091820191016110df565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461115e576040519150601f19603f3d011682016040523d82523d6000602084013e611163565b606091505b50915050805160001461118d5784828151811061117c57fe5b602002602001015192505050610b89565b5060010161102e565b506000949350505050565b60408051600580825260c082019092526060916020820160a08036833701905050905060005b6005811015611024578281600581106111dc57fe5b60200201518282815181106111ed57fe5b6001600160e01b0319909216602092830291909101909101526001016111c7565b6000805b83518110156111965760005a90506000866001600160a01b031662030d4087858151811061123c57fe5b60200260200101518760405160200180836001600160e01b031916815260040182805190602001908083835b602083106112875780518252601f199092019160209182019101611268565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b602083106112eb5780518252601f1990920191602091820191016112cc565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038160008787f1925050503d806000811461134e576040519150601f19603f3d011682016040523d82523d6000602084013e611353565b606091505b5050905060005a830390506127108111156113875786848151811061137457fe5b6020026020010151945050505050610b89565b505050600101611212565b60006113e7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b779092919063ffffffff16565b805190915015610b725780806020019051602081101561140657600080fd5b5051610b725760405162461bcd60e51b815260040180806020018281038252602a815260200180611a07602a913960400191505060405180910390fd5b6060824710156114845760405162461bcd60e51b81526004018080602001828103825260268152602001806119e16026913960400191505060405180910390fd5b61148d856116d9565b6114de576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b6020831061151c5780518252601f1990920191602091820191016114fd565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461157e576040519150601f19603f3d011682016040523d82523d6000602084013e611583565b606091505b50915091506115938282866116df565b979650505050505050565b6115a6611895565b6001600160a01b0390961686526001600160e01b0319938416604087015291831660a0860152821660608501521660808301525090565b6060815160001415611623575060408051808201909152601c81527f636170747572656420656d70747920726576657274206275666665720000000060208201526116d4565b6308c379a061163d6116388460006004611745565b61176e565b63ffffffff1614611668576040518060600160405280603f81526020016119a2603f913990506116d4565b600061167d611678846004611783565b6117a7565b90508051600014156116c457505060408051808201909152601d81527f636170747572656420656d70747920726576657274206d65737361676500000060208201526116d4565b60006116cf82611817565b925050505b919050565b3b151590565b606083156116ee575081610b89565b8251156116fe5782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315610f21578181015183820152602001610f09565b61174d6118ca565b611757848461182d565b815260208101919091526040810191909152919050565b80516020820151600091906116cf8282611834565b61178b6118ca565b818351101561179957825191505b610b89838384865103611745565b60208101516060908067ffffffffffffffff811180156117c657600080fd5b506040519080825280601f01601f1916602001820160405280156117f1576020820181803683370190505b508351909250600061180284611851565b905061180f818385611857565b505050919050565b60608180602001905181019061038991906118eb565b0160200190565b6000600180600884021b0380836020038503511691505092915050565b60200190565b5b60208110611877578151835260209283019290910190601f1901611858565b600180600883602003021b0380845116811984511617845250505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b60405180606001604052806000815260200160008152602001600081525090565b600060208083850312156118fd578182fd5b825167ffffffffffffffff80821115611914578384fd5b818501915085601f830112611927578384fd5b81518181111561193357fe5b604051601f8201601f191681018501838111828210171561195057fe5b6040528181528382018501881015611966578586fd5b8592505b81831015611987578383018501518184018601529184019161196a565b81831115611593578585838301015297965050505050505056fe6361707475726564206120726576657274206572726f722c2062757420697420646f65736e277420636f6e666f726d20746f20746865207374616e64617264416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212208155782733324bf8f6da4c82d8ff518244c3e00d63c5e8b21d3c1452a41e5d6864736f6c63430007060033416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122092ff9c2b674efdc50f8963f88967e9a4f849cb5bbc7d3b3c106b791e5a0dcb3264736f6c63430007060033",
  "deployedBytecode": "0x60806040526004361061001e5760003560e01c80637d8b525314610020575b005b61001e6004803603608081101561003657600080fd5b508035151590602081013590604081013590606001356001600160a01b03167f729bbe2c9703a1bd3cf2ce66444473a305404e4080924c1e3068becdc1a3e0b183838387604051610086906100eb565b93845260208401929092526001600160a01b031660408084019190915290151560608301525190819003608001906000f0801580156100c9573d6000803e3d6000fd5b50604080516001600160a01b039092168252519081900360200190a150505050565b6129d0806100f98339019056fe6101c06040523480156200001257600080fd5b50604051620029d0380380620029d0833981810160405260808110156200003857600080fd5b508051602080830151604084015160609485015180151560f81b60805260a085905260c08390529481901b6001600160601b03191661012052929390929160009062000091908490849062000170811b6200066417901c565b60a08101516001600160e01b0319908116610140526040820151811661016052606082015181166101a0526080820151166101805290506000620000e282876200043a602090811b6200090f17901c565b6001600160a01b031660e0816001600160a01b031660601b815250905060006200011b86846200043a60201b6200090f1790919060201c565b6001600160601b0319606082901b16610100526001600160a01b031690506200016385600260001904846001600160a01b03166200059060201b62000a5f179092919060201c565b5050505050505062000dd2565b6200017a62000d9d565b6001600160a01b03831681528115156020820181905262000217576040805160808101825263046e8dd760e31b8152632a77a7b760e11b6020820152630331952960e51b9181019190915263c661065760e01b606082015262000211908490620001e490620006b4565b6000604051602001808281526020019150506040516020818303038152906040526200072b60201b60201c565b62000266565b60408051608081018252635b9cca9f60e11b815263b62f2cd360e01b6020820152631654775560e21b91810191909152630b9947eb60e41b606082015262000266908490620001e490620006b4565b6001600160e01b031916604082015260208101516200032c576040805160a081018252630b68372160e31b8152630f7c084960e21b6020820152631fc5330960e11b918101919091526374aee29160e11b606082015263394747c560e01b608082015262000326908490620002db90620008b0565b60408051600060208201819052818301819052633b9aca0060608301526001600160fc1b03608083015260a0808301919091528251808303909101815260c090910190915262000921565b6200037b565b604080516080810182526365b2489b60e01b8152635320bf6b60e11b6020820152634c9d2b6760e01b918101919091526309ac9b6d60e31b60608201526200037b908490620002db90620006b4565b6001600160e01b031916606082018190526200039f57630b68372160e31b60608201525b60408051608081018252635e0d443f60e01b815263024a81eb60e41b60208201526357d42f1b60e01b9181019190915263556d6e9f60e01b606082015262000425908490620003ee90620006b4565b6040805160006020820152600181830152633b9aca006060808301919091528251808303909101815260809091019091526200072b565b6001600160e01b031916608082015292915050565b600080600084600001516001600160a01b031685604001518560405160240180828152602001915050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050506040518082805190602001908083835b60208310620004c75780518252601f199092019160209182019101620004a6565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811462000529576040519150601f19603f3d011682016040523d82523d6000602084013e6200052e565b606091505b5091509150816200056f576040805162461bcd60e51b815260206004820152600660248201526521636f696e7360d01b604482015290519081900360640190fd5b8080602001905160208110156200058557600080fd5b505195945050505050565b8015806200061a575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015620005ea57600080fd5b505afa158015620005ff573d6000803e3d6000fd5b505050506040513d60208110156200061657600080fd5b5051155b620006575760405162461bcd60e51b81526004018080602001828103825260368152602001806200299a6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620006af91859162000ab116565b505050565b60408051600480825260a082019092526060916020820160808036833701905050905060005b60048110156200072557828160048110620006f157fe5b60200201518282815181106200070357fe5b6001600160e01b031990921660209283029190910190910152600101620006da565b50919050565b6000805b8351811015620008a3576000856001600160a01b03168583815181106200075257fe5b60200260200101518560405160200180836001600160e01b031916815260040182805190602001908083835b602083106200079f5780518252601f1990920191602091820191016200077e565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b60208310620008055780518252601f199092019160209182019101620007e4565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811462000867576040519150601f19603f3d011682016040523d82523d6000602084013e6200086c565b606091505b50915050805160001462000899578482815181106200088757fe5b602002602001015192505050620008a9565b506001016200072f565b50600090505b9392505050565b60408051600580825260c082019092526060916020820160a08036833701905050905060005b60058110156200072557828160058110620008ed57fe5b6020020151828281518110620008ff57fe5b6001600160e01b031990921660209283029190910190910152600101620008d6565b6000805b8351811015620008a35760005a90506000866001600160a01b031662030d408785815181106200095157fe5b60200260200101518760405160200180836001600160e01b031916815260040182805190602001908083835b602083106200099e5780518252601f1990920191602091820191016200097d565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b6020831062000a045780518252601f199092019160209182019101620009e3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038160008787f1925050503d806000811462000a69576040519150601f19603f3d011682016040523d82523d6000602084013e62000a6e565b606091505b5050905060005a8303905061271081111562000aa55786848151811062000a9157fe5b6020026020010151945050505050620008a9565b50505060010162000925565b600062000b0d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031662000b6d60201b62000b77179092919060201c565b805190915015620006af5780806020019051602081101562000b2e57600080fd5b5051620006af5760405162461bcd60e51b815260040180806020018281038252602a81526020018062002970602a913960400191505060405180910390fd5b606062000b7e848460008562000b86565b949350505050565b60608247101562000bc95760405162461bcd60e51b81526004018080602001828103825260268152602001806200294a6026913960400191505060405180910390fd5b62000bd48562000ced565b62000c26576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b6020831062000c665780518252601f19909201916020918201910162000c45565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811462000cca576040519150601f19603f3d011682016040523d82523d6000602084013e62000ccf565b606091505b50909250905062000ce282828662000cf3565b979650505050505050565b3b151590565b6060831562000d04575081620008a9565b82511562000d155782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101562000d6157818101518382015260200162000d47565b50505050905090810190601f16801562000d8f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b60805160f81c60a05160c05160e05160601c6101005160601c6101205160601c6101405160e01c60e01b6101605160e01c60e01b6101805160e01c60e01b6101a05160e01c60e01b611a9c62000eae6000398061030f5280610c215250806103b55280610c425250806102c75280610bdf5250806102eb5280610c0052508061027f5280610b9d5250806102375280610499528061056b528061061252508061025b52806103dc52508061035952806103915280610533525080610338528061051252806106425250806102a35280610bbe5250611a9c6000f3fe6080604052600436106100ab5760003560e01c806396b0c4191161006457806396b0c4191461017f5780639c79293814610194578063be8a97b7146101d0578063cc1a28b9146101e5578063def2489b146101fa578063f11cba4614610220576100b2565b8063083ab1b8146100b45780630bc66fdf146100e557806316f0115b146100fa5780636f307dc31461010f578063802b3b161461013857806382277ad61461016a576100b2565b366100b257005b005b3480156100c057600080fd5b506100c9610235565b604080516001600160a01b039092168252519081900360200190f35b3480156100f157600080fd5b506100c9610259565b34801561010657600080fd5b506100c961027d565b34801561011b57600080fd5b506101246102a1565b604080519115158252519081900360200190f35b34801561014457600080fd5b5061014d6102c5565b604080516001600160e01b03199092168252519081900360200190f35b34801561017657600080fd5b5061014d6102e9565b34801561018b57600080fd5b5061014d61030d565b3480156101a057600080fd5b506101be600480360360208110156101b757600080fd5b5035610331565b60408051918252519081900360200190f35b3480156101dc57600080fd5b506101be61038f565b3480156101f157600080fd5b5061014d6103b3565b6101be6004803603602081101561021057600080fd5b50356001600160a01b03166103d7565b34801561022c57600080fd5b506101be610640565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006103897f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000084610381610b90565b929190610c6b565b92915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561044757600080fd5b505afa15801561045b573d6000803e3d6000fd5b505050506040513d602081101561047157600080fd5b5051604080516370a0823160e01b815230600482015290519192506000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916370a08231916024808301926020929190829003018186803b1580156104df57600080fd5b505afa1580156104f3573d6000803e3d6000fd5b505050506040513d602081101561050957600080fd5b505190506105687f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000846010810461055f610b90565b93929190610dc5565b807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156105d657600080fd5b505afa1580156105ea573d6000803e3d6000fd5b505050506040513d602081101561060057600080fd5b50510392506106396001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163385610f65565b5050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61066c611895565b6001600160a01b0383168152811515602082018190526106fd576040805160808101825263046e8dd760e31b8152632a77a7b760e11b6020820152630331952960e51b9181019190915263c661065760e01b60608201526106f89084906106d290610fb7565b60006040516020018082815260200191505060405160208183030381529060405261102a565b610749565b60408051608081018252635b9cca9f60e11b815263b62f2cd360e01b6020820152631654775560e21b91810191909152630b9947eb60e41b60608201526107499084906106d290610fb7565b6001600160e01b03191660408201526020810151610809576040805160a081018252630b68372160e31b8152630f7c084960e21b6020820152631fc5330960e11b918101919091526374aee29160e11b606082015263394747c560e01b60808201526108049084906107ba906111a1565b60408051600060208201819052818301819052633b9aca0060608301526001600160fc1b03608083015260a0808301919091528251808303909101815260c090910190915261120e565b610855565b604080516080810182526365b2489b60e01b8152635320bf6b60e11b6020820152634c9d2b6760e01b918101919091526309ac9b6d60e31b60608201526108559084906107ba90610fb7565b6001600160e01b0319166060820181905261087857630b68372160e31b60608201525b60408051608081018252635e0d443f60e01b815263024a81eb60e41b60208201526357d42f1b60e01b9181019190915263556d6e9f60e01b60608201526108fa9084906108c490610fb7565b6040805160006020820152600181830152633b9aca0060608083019190915282518083039091018152608090910190915261102a565b6001600160e01b031916608082015292915050565b600080600084600001516001600160a01b031685604001518560405160240180828152602001915050604051602081830303815290604052906001600160e01b0319166020820180516001600160e01b0383818316178352505050506040518082805190602001908083835b6020831061099a5780518252601f19909201916020918201910161097b565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d80600081146109fa576040519150601f19603f3d011682016040523d82523d6000602084013e6109ff565b606091505b509150915081610a3f576040805162461bcd60e51b815260206004820152600660248201526521636f696e7360d01b604482015290519081900360640190fd5b808060200190516020811015610a5457600080fd5b505195945050505050565b801580610ae5575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015610ab757600080fd5b505afa158015610acb573d6000803e3d6000fd5b505050506040513d6020811015610ae157600080fd5b5051155b610b205760405162461bcd60e51b8152600401808060200182810382526036815260200180611a316036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610b72908490611392565b505050565b6060610b868484600085611443565b90505b9392505050565b610b98611895565b610c667f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000061159e565b905090565b83516080850151604080516024810187905260448101869052606480820186905282518083039091018152608490910182526020810180516001600160e01b03166001600160e01b031990941693909317835290518151600094859485946001600160a01b039092169391928291908083835b60208310610cfd5780518252601f199092019160209182019101610cde565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d8060008114610d5d576040519150601f19603f3d011682016040523d82523d6000602084013e610d62565b606091505b509150915081610da3576040805162461bcd60e51b8152602060048201526007602482015266216765745f647960c81b604482015290519081900360640190fd5b808060200190516020811015610db857600080fd5b5051979650505050505050565b60008086600001516001600160a01b03165a606089015160408051602481018b9052604481018a90526064810189905260848082018990528251808303909101815260a490910182526020810180516001600160e01b03166001600160e01b031990941693909317835290518151919290918291908083835b60208310610e5d5780518252601f199092019160209182019101610e3e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038160008787f1925050503d8060008114610ec0576040519150601f19603f3d011682016040523d82523d6000602084013e610ec5565b606091505b509150915081610f5c57610ed8816115dd565b60405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610f21578181015183820152602001610f09565b50505050905090810190601f168015610f4e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610b72908490611392565b60408051600480825260a082019092526060916020820160808036833701905050905060005b600481101561102457828160048110610ff257fe5b602002015182828151811061100357fe5b6001600160e01b031990921660209283029190910190910152600101610fdd565b50919050565b6000805b8351811015611196576000856001600160a01b031685838151811061104f57fe5b60200260200101518560405160200180836001600160e01b031916815260040182805190602001908083835b6020831061109a5780518252601f19909201916020918201910161107b565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b602083106110fe5780518252601f1990920191602091820191016110df565b6001836020036101000a038019825116818451168082178552505050505050905001915050600060405180830381855afa9150503d806000811461115e576040519150601f19603f3d011682016040523d82523d6000602084013e611163565b606091505b50915050805160001461118d5784828151811061117c57fe5b602002602001015192505050610b89565b5060010161102e565b506000949350505050565b60408051600580825260c082019092526060916020820160a08036833701905050905060005b6005811015611024578281600581106111dc57fe5b60200201518282815181106111ed57fe5b6001600160e01b0319909216602092830291909101909101526001016111c7565b6000805b83518110156111965760005a90506000866001600160a01b031662030d4087858151811061123c57fe5b60200260200101518760405160200180836001600160e01b031916815260040182805190602001908083835b602083106112875780518252601f199092019160209182019101611268565b6001836020036101000a038019825116818451168082178552505050505050905001925050506040516020818303038152906040526040518082805190602001908083835b602083106112eb5780518252601f1990920191602091820191016112cc565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038160008787f1925050503d806000811461134e576040519150601f19603f3d011682016040523d82523d6000602084013e611353565b606091505b5050905060005a830390506127108111156113875786848151811061137457fe5b6020026020010151945050505050610b89565b505050600101611212565b60006113e7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b779092919063ffffffff16565b805190915015610b725780806020019051602081101561140657600080fd5b5051610b725760405162461bcd60e51b815260040180806020018281038252602a815260200180611a07602a913960400191505060405180910390fd5b6060824710156114845760405162461bcd60e51b81526004018080602001828103825260268152602001806119e16026913960400191505060405180910390fd5b61148d856116d9565b6114de576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b6020831061151c5780518252601f1990920191602091820191016114fd565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461157e576040519150601f19603f3d011682016040523d82523d6000602084013e611583565b606091505b50915091506115938282866116df565b979650505050505050565b6115a6611895565b6001600160a01b0390961686526001600160e01b0319938416604087015291831660a0860152821660608501521660808301525090565b6060815160001415611623575060408051808201909152601c81527f636170747572656420656d70747920726576657274206275666665720000000060208201526116d4565b6308c379a061163d6116388460006004611745565b61176e565b63ffffffff1614611668576040518060600160405280603f81526020016119a2603f913990506116d4565b600061167d611678846004611783565b6117a7565b90508051600014156116c457505060408051808201909152601d81527f636170747572656420656d70747920726576657274206d65737361676500000060208201526116d4565b60006116cf82611817565b925050505b919050565b3b151590565b606083156116ee575081610b89565b8251156116fe5782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315610f21578181015183820152602001610f09565b61174d6118ca565b611757848461182d565b815260208101919091526040810191909152919050565b80516020820151600091906116cf8282611834565b61178b6118ca565b818351101561179957825191505b610b89838384865103611745565b60208101516060908067ffffffffffffffff811180156117c657600080fd5b506040519080825280601f01601f1916602001820160405280156117f1576020820181803683370190505b508351909250600061180284611851565b905061180f818385611857565b505050919050565b60608180602001905181019061038991906118eb565b0160200190565b6000600180600884021b0380836020038503511691505092915050565b60200190565b5b60208110611877578151835260209283019290910190601f1901611858565b600180600883602003021b0380845116811984511617845250505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a081019190915290565b60405180606001604052806000815260200160008152602001600081525090565b600060208083850312156118fd578182fd5b825167ffffffffffffffff80821115611914578384fd5b818501915085601f830112611927578384fd5b81518181111561193357fe5b604051601f8201601f191681018501838111828210171561195057fe5b6040528181528382018501881015611966578586fd5b8592505b81831015611987578383018501518184018601529184019161196a565b81831115611593578585838301015297965050505050505056fe6361707475726564206120726576657274206572726f722c2062757420697420646f65736e277420636f6e666f726d20746f20746865207374616e64617264416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212208155782733324bf8f6da4c82d8ff518244c3e00d63c5e8b21d3c1452a41e5d6864736f6c63430007060033416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122092ff9c2b674efdc50f8963f88967e9a4f849cb5bbc7d3b3c106b791e5a0dcb3264736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}