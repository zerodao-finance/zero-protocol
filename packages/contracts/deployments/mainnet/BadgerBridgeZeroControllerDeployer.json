{
  "address": "0xc92d992aB3BC0a1F58f775C39d463Adc8a62fDd3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "Deployment",
      "type": "event"
    }
  ],
  "transactionHash": "0xe4bf89dccdf925b730bd93de045dd6557feb13986d190b776ecb57edbb14562d",
  "receipt": {
    "to": null,
    "from": "0xFE7B639c04c205b7E758Ee999cb72C80344b3B0e",
    "contractAddress": "0xc92d992aB3BC0a1F58f775C39d463Adc8a62fDd3",
    "transactionIndex": 58,
    "gasUsed": "5520599",
    "logsBloom": "0x
    "blockHash": "0xb0fe7f9b3b6032ac1c510bf261d07b6801e6cc5230cefe07ece646b4af159dbf",
    "transactionHash": "0xe4bf89dccdf925b730bd93de045dd6557feb13986d190b776ecb57edbb14562d",
    "logs": [
      {
        "transactionIndex": 58,
        "blockNumber": 14567078,
        "transactionHash": "0xe4bf89dccdf925b730bd93de045dd6557feb13986d190b776ecb57edbb14562d",
        "address": "0xFF727BDFa7608d7Fd12Cd2cDA1e7736ACbfCdB7B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c92d992ab3bc0a1f58f775c39d463adc8a62fdd3"
        ],
        "data": "0x",
        "logIndex": 79,
        "blockHash": "0xb0fe7f9b3b6032ac1c510bf261d07b6801e6cc5230cefe07ece646b4af159dbf"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 14567078,
        "transactionHash": "0xe4bf89dccdf925b730bd93de045dd6557feb13986d190b776ecb57edbb14562d",
        "address": "0xFF727BDFa7608d7Fd12Cd2cDA1e7736ACbfCdB7B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000c92d992ab3bc0a1f58f775c39d463adc8a62fdd3",
          "0x0000000000000000000000005e9b37149b7d7611bd0eb070194dda78eb11efdc"
        ],
        "data": "0x",
        "logIndex": 80,
        "blockHash": "0xb0fe7f9b3b6032ac1c510bf261d07b6801e6cc5230cefe07ece646b4af159dbf"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 14567078,
        "transactionHash": "0xe4bf89dccdf925b730bd93de045dd6557feb13986d190b776ecb57edbb14562d",
        "address": "0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a8bd3ffebf92538b3b830dd5b2516a5111db164d",
          "0x000000000000000000000000e4b679400f0f267212d5d812b95f58c83243ee71"
        ],
        "data": "0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 81,
        "blockHash": "0xb0fe7f9b3b6032ac1c510bf261d07b6801e6cc5230cefe07ece646b4af159dbf"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 14567078,
        "transactionHash": "0xe4bf89dccdf925b730bd93de045dd6557feb13986d190b776ecb57edbb14562d",
        "address": "0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a8bd3ffebf92538b3b830dd5b2516a5111db164d",
          "0x00000000000000000000000093054188d876f558f4a66b2ef1d97d16edf0895b"
        ],
        "data": "0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 82,
        "blockHash": "0xb0fe7f9b3b6032ac1c510bf261d07b6801e6cc5230cefe07ece646b4af159dbf"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 14567078,
        "transactionHash": "0xe4bf89dccdf925b730bd93de045dd6557feb13986d190b776ecb57edbb14562d",
        "address": "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a8bd3ffebf92538b3b830dd5b2516a5111db164d",
          "0x00000000000000000000000093054188d876f558f4a66b2ef1d97d16edf0895b"
        ],
        "data": "0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 83,
        "blockHash": "0xb0fe7f9b3b6032ac1c510bf261d07b6801e6cc5230cefe07ece646b4af159dbf"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 14567078,
        "transactionHash": "0xe4bf89dccdf925b730bd93de045dd6557feb13986d190b776ecb57edbb14562d",
        "address": "0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a8bd3ffebf92538b3b830dd5b2516a5111db164d",
          "0x00000000000000000000000080466c64868e1ab14a1ddf27a676c3fcbe638fe5"
        ],
        "data": "0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 84,
        "blockHash": "0xb0fe7f9b3b6032ac1c510bf261d07b6801e6cc5230cefe07ece646b4af159dbf"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 14567078,
        "transactionHash": "0xe4bf89dccdf925b730bd93de045dd6557feb13986d190b776ecb57edbb14562d",
        "address": "0x49849C98ae39Fff122806C06791Fa73784FB3675",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a8bd3ffebf92538b3b830dd5b2516a5111db164d",
          "0x0000000000000000000000006def55d2e18486b9ddfaa075bc4e4ee0b28c1545"
        ],
        "data": "0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 85,
        "blockHash": "0xb0fe7f9b3b6032ac1c510bf261d07b6801e6cc5230cefe07ece646b4af159dbf"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 14567078,
        "transactionHash": "0xe4bf89dccdf925b730bd93de045dd6557feb13986d190b776ecb57edbb14562d",
        "address": "0x6dEf55d2e18486B9dDfaA075bc4e4EE0B28c1545",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a8bd3ffebf92538b3b830dd5b2516a5111db164d",
          "0x00000000000000000000000041671ba1abcba387b9b2b752c205e22e916be6e3"
        ],
        "data": "0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 86,
        "blockHash": "0xb0fe7f9b3b6032ac1c510bf261d07b6801e6cc5230cefe07ece646b4af159dbf"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 14567078,
        "transactionHash": "0xe4bf89dccdf925b730bd93de045dd6557feb13986d190b776ecb57edbb14562d",
        "address": "0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a8bd3ffebf92538b3b830dd5b2516a5111db164d",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 87,
        "blockHash": "0xb0fe7f9b3b6032ac1c510bf261d07b6801e6cc5230cefe07ece646b4af159dbf"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 14567078,
        "transactionHash": "0xe4bf89dccdf925b730bd93de045dd6557feb13986d190b776ecb57edbb14562d",
        "address": "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000a8bd3ffebf92538b3b830dd5b2516a5111db164d",
          "0x0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d"
        ],
        "data": "0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 88,
        "blockHash": "0xb0fe7f9b3b6032ac1c510bf261d07b6801e6cc5230cefe07ece646b4af159dbf"
      },
      {
        "transactionIndex": 58,
        "blockNumber": 14567078,
        "transactionHash": "0xe4bf89dccdf925b730bd93de045dd6557feb13986d190b776ecb57edbb14562d",
        "address": "0xc92d992aB3BC0a1F58f775C39d463Adc8a62fDd3",
        "topics": [
          "0x8caefb0c150c4d097593deb07f0591b0225f67392b0ae76f2df209b8be37b82a",
          "0x000000000000000000000000a8bd3ffebf92538b3b830dd5b2516a5111db164d"
        ],
        "data": "0x",
        "logIndex": 89,
        "blockHash": "0xb0fe7f9b3b6032ac1c510bf261d07b6801e6cc5230cefe07ece646b4af159dbf"
      }
    ],
    "blockNumber": 14567078,
    "cumulativeGasUsed": "11653841",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "273035ff0989a1ced7f173590c9ece2f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"Deployment\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/proxy/BadgerBridgeZeroControllerDeployer.sol\":\"BadgerBridgeZeroControllerDeployer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal initializer {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\\n        return keccak256(\\n            abi.encode(\\n                typeHash,\\n                name,\\n                version,\\n                _getChainId(),\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", _domainSeparatorV4(), structHash));\\n    }\\n\\n    function _getChainId() private view returns (uint256 chainId) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            chainId := chainid()\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6cd0bc8c149150614ca3d4a3d3d21f844a0ab3032625f34fcfcf1c2c8b351638\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1fd568d8b8ca285c801fbd1d3f40f848434d850a682c0273786cada3e0b84057\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0x94c4719c16ffb96dd3cdc68f6fbf78105153018adbf382241821e8188e6a4bd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\",\"keccak256\":\"0x0414d54056b3d8f9102ae1142264e9361408397878148203ab7a25cbf6248f08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ProxyAdmin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"./TransparentUpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\\n */\\ncontract ProxyAdmin is Ownable {\\n\\n    /**\\n     * @dev Returns the current implementation of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"implementation()\\\")) == 0x5c60da1b\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"5c60da1b\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Returns the current admin of `proxy`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\\n        // We need to manually run the static call since the getter cannot be flagged as view\\n        // bytes4(keccak256(\\\"admin()\\\")) == 0xf851a440\\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\\\"f851a440\\\");\\n        require(success);\\n        return abi.decode(returndata, (address));\\n    }\\n\\n    /**\\n     * @dev Changes the admin of `proxy` to `newAdmin`.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the current admin of `proxy`.\\n     */\\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\\n        proxy.changeAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\\n        proxy.upgradeTo(implementation);\\n    }\\n\\n    /**\\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\\n     *\\n     * Requirements:\\n     *\\n     * - This contract must be the admin of `proxy`.\\n     */\\n    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {\\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\\n    }\\n}\\n\",\"keccak256\":\"0x36cc024d326dd48b4ec20983ec4b9335b8edf44ae45ebdd5a2ea8217f872f9f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./UpgradeableProxy.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that is upgradeable by an admin.\\n *\\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\\n * clashing], which can potentially be used in an attack, this contract uses the\\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\\n * things that go hand in hand:\\n *\\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\\n * that call matches one of the admin functions exposed by the proxy itself.\\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\\n * \\\"admin cannot fallback to proxy target\\\".\\n *\\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\\n * to sudden errors when trying to call a function from the proxy implementation.\\n *\\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\\n */\\ncontract TransparentUpgradeableProxy is UpgradeableProxy {\\n    /**\\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\\n     * optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}.\\n     */\\n    constructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_logic, _data) {\\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.admin\\\")) - 1));\\n        _setAdmin(admin_);\\n    }\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\\n     */\\n    modifier ifAdmin() {\\n        if (msg.sender == _admin()) {\\n            _;\\n        } else {\\n            _fallback();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function admin() external ifAdmin returns (address admin_) {\\n        admin_ = _admin();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\\n     */\\n    function implementation() external ifAdmin returns (address implementation_) {\\n        implementation_ = _implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\\n     */\\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\\n        require(newAdmin != address(0), \\\"TransparentUpgradeableProxy: new admin is the zero address\\\");\\n        emit AdminChanged(_admin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\\n     */\\n    function upgradeTo(address newImplementation) external virtual ifAdmin {\\n        _upgradeTo(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\\n     * proxied contract.\\n     *\\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtual ifAdmin {\\n        _upgradeTo(newImplementation);\\n        Address.functionDelegateCall(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _admin() internal view virtual returns (address adm) {\\n        bytes32 slot = _ADMIN_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            adm := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        bytes32 slot = _ADMIN_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newAdmin)\\n        }\\n    }\\n\\n    /**\\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\\n     */\\n    function _beforeFallback() internal virtual override {\\n        require(msg.sender != _admin(), \\\"TransparentUpgradeableProxy: admin cannot fallback to proxy target\\\");\\n        super._beforeFallback();\\n    }\\n}\\n\",\"keccak256\":\"0xf852214ea286716082f3ba480ff70bda2cbe2d11238091d2a440767d0ed49e61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/UpgradeableProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./Proxy.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n *\\n * Upgradeability is only provided internally through {_upgradeTo}. For an externally upgradeable proxy see\\n * {TransparentUpgradeableProxy}.\\n */\\ncontract UpgradeableProxy is Proxy {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) public payable {\\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1));\\n        _setImplementation(_logic);\\n        if(_data.length > 0) {\\n            Address.functionDelegateCall(_logic, _data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 private constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            impl := sload(slot)\\n        }\\n    }\\n\\n    /**\\n     * @dev Upgrades the proxy to a new implementation.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal virtual {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"UpgradeableProxy: new implementation is not a contract\\\");\\n\\n        bytes32 slot = _IMPLEMENTATION_SLOT;\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            sstore(slot, newImplementation)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x81af1059a5bd5fb25cb0351499e1d4110416f5b0000ffad6427cbf6088b193a4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x744e30c133bd0f7ca9e7163433cf6d72f45c6bb1508c2c9c02f1a6db796ae59d\"},\"contracts/controllers/BadgerBridgeZeroController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport {IUniswapV2Router02} from \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\nimport {UniswapV2Library} from \\\"../libraries/UniswapV2Library.sol\\\";\\nimport {ZeroLib} from '../libraries/ZeroLib.sol';\\nimport {IERC2612Permit} from '../interfaces/IERC2612Permit.sol';\\nimport {IRenCrv} from '../interfaces/CurvePools/IRenCrv.sol';\\nimport {SplitSignatureLib } from \\\"../libraries/SplitSignatureLib.sol\\\";\\nimport {IBadgerSettPeak } from \\\"../interfaces/IBadgerSettPeak.sol\\\";\\nimport { ICurveFi } from \\\"../interfaces/ICurveFi.sol\\\";\\nimport {IGateway} from '../interfaces/IGateway.sol';\\nimport {ICurveETHUInt256} from '../interfaces/CurvePools/ICurveETHUInt256.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { IyVault } from \\\"../interfaces/IyVault.sol\\\";\\nimport { ISett } from \\\"../interfaces/ISett.sol\\\";\\nimport {Math} from '@openzeppelin/contracts/math/Math.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {ECDSA} from '@openzeppelin/contracts/cryptography/ECDSA.sol';\\nimport {EIP712Upgradeable} from '@openzeppelin/contracts-upgradeable/drafts/EIP712Upgradeable.sol';\\n\\ncontract BadgerBridgeZeroController is EIP712Upgradeable {\\n\\tusing SafeERC20 for IERC20;\\n\\tusing SafeMath for *;\\n\\tuint256 public fee;\\n\\taddress public governance;\\n\\taddress public strategist;\\n\\n\\taddress constant btcGateway = 0xe4b679400F0f267212D5D812B95f58C83243EE71;\\n\\taddress constant router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n\\taddress constant factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n        address constant usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n        address constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\taddress constant wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n\\taddress constant renbtc = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D;\\n\\taddress constant renCrv = 0x93054188d876f558f4a66B2EF1d97d16eDf0895B;\\n\\taddress constant tricrypto = 0x80466c64868E1ab14a1Ddf27A676C3fcBE638Fe5;\\n        address constant renCrvLp = 0x49849C98ae39Fff122806C06791Fa73784FB3675;\\n        address constant bCrvRen = 0x6dEf55d2e18486B9dDfaA075bc4e4EE0B28c1545;\\n        address constant settPeak = 0x41671BA1abcbA387b9b2B752c205e22e916BE6e3;\\n        address constant ibbtc = 0xc4E15973E6fF2A35cC804c2CF9D2a1b817a8b40F;\\n\\tuint256 public governanceFee;\\n        bytes32 constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb;\\n\\tuint256 constant GAS_COST = uint256(3e5);\\n        uint256 constant IBBTC_GAS_COST = uint256(7e5);\\n\\tuint256 constant ETH_RESERVE = uint256(5 ether);\\n\\tuint256 internal renbtcForOneETHPrice;\\n        uint256 internal burnFee;\\n        uint256 public keeperReward;\\n        uint256 public constant REPAY_GAS_DIFF = 41510;\\n        uint256 public constant BURN_GAS_DIFF = 41118;\\n\\tmapping(address => uint256) public nonces;\\n\\tbytes32 internal PERMIT_DOMAIN_SEPARATOR_WBTC;\\n\\tbytes32 internal PERMIT_DOMAIN_SEPARATOR_IBBTC;\\n\\tfunction setStrategist(address _strategist) public {\\n\\t\\trequire(msg.sender == governance, '!governance');\\n\\t\\tstrategist = _strategist;\\n\\t}\\n\\tfunction setGovernance(address _governance) public {\\n\\t\\trequire(msg.sender == governance, '!governance');\\n\\t\\tgovernance = _governance;\\n\\t}\\n        function computeCalldataGasDiff() internal pure returns (uint256 diff) {\\n\\t  if (true) return 0; // TODO: implement exact gas metering\\n          // EVM charges less for zero bytes, we must compute the offset for refund\\n\\t  // TODO make this efficient\\n\\t  uint256 sz;\\n\\t  assembly {\\n\\t    sz := calldatasize()\\n\\t  }\\n\\t  diff = sz.mul(uint256(68));\\n          bytes memory slice;\\n          for (uint256 i = 0; i < sz; i += 0x20) {\\n            uint256 word;\\n            assembly {\\n\\t      word := calldataload(i)\\n\\t    }\\n            for (uint256 i = 0; i < 256 && ((uint256(~0) << i) & word) != 0; i += 8) {\\n              if ((word >> i) & 0xff != 0) diff -= 64;\\n\\t    }\\n\\t  }\\n\\t}\\n\\tfunction getChainId() internal pure returns (uint256 result) {\\n\\t\\tassembly {\\n\\t\\t\\tresult := chainid()\\n\\t\\t}\\n\\t}\\n        function setParameters(uint256 _governanceFee, uint256 _fee, uint256 _burnFee, uint256 _keeperReward) public {\\n          require(governance == msg.sender, \\\"!governance\\\");\\n          governanceFee = _governanceFee;\\n          fee = _fee;\\n          burnFee = _burnFee;\\n\\t  keeperReward = _keeperReward;\\n        }\\n\\tfunction initialize(address _governance, address _strategist) public initializer {\\n\\t        fee = uint256(25e14);\\n                burnFee = uint256(4e15);\\n\\t\\tgovernanceFee = uint256(5e17);\\n\\t\\tgovernance = _governance;\\n\\t\\tstrategist = _strategist;\\n\\t\\tkeeperReward = uint256(1 ether).div(1000);\\n\\t\\tIERC20(renbtc).safeApprove(btcGateway, ~uint256(0) >> 2);\\n\\t\\tIERC20(renbtc).safeApprove(renCrv, ~uint256(0) >> 2);\\n\\t\\tIERC20(wbtc).safeApprove(renCrv, ~uint256(0) >> 2);\\n\\t\\tIERC20(wbtc).safeApprove(tricrypto, ~uint256(0) >> 2);\\n\\t\\tIERC20(renCrvLp).safeApprove(bCrvRen, ~uint256(0) >> 2);\\n\\t\\tIERC20(bCrvRen).safeApprove(settPeak, ~uint256(0) >> 2);\\n\\t\\tIERC20(renbtc).safeApprove(router, ~uint256(0) >> 2);\\n\\t\\tIERC20(usdc).safeApprove(router, ~uint256(0) >> 2);\\n\\t\\tPERMIT_DOMAIN_SEPARATOR_WBTC = keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\tkeccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n\\t\\t\\t\\tkeccak256('WBTC'),\\n\\t\\t\\t\\tkeccak256('1'),\\n\\t\\t\\t\\tgetChainId(),\\n\\t\\t\\t\\twbtc\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\tPERMIT_DOMAIN_SEPARATOR_IBBTC = keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\tkeccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\\n\\t\\t\\t\\tkeccak256('ibBTC'),\\n\\t\\t\\t\\tkeccak256('1'),\\n\\t\\t\\t\\tgetChainId(),\\n\\t\\t\\t\\tibbtc\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction applyRatio(uint256 v, uint256 n) internal pure returns (uint256 result) {\\n\\t\\tresult = v.mul(n).div(uint256(1 ether));\\n\\t}\\n\\n\\tfunction toWBTC(uint256 amount) internal returns (uint256 amountOut) {\\n\\t\\tuint256 amountStart = IERC20(wbtc).balanceOf(address(this));\\n\\t\\t(bool success, ) = renCrv.call(\\n\\t\\t\\tabi.encodeWithSelector(IRenCrv.exchange.selector, 0, 1, amount)\\n\\t\\t);\\n\\t\\tamountOut = IERC20(wbtc).balanceOf(address(this)).sub(amountStart);\\n\\t}\\n        function toIBBTC(uint256 amountIn) internal returns (uint256 amountOut) {\\n            uint[2] memory amounts;\\n            amounts[0] = amountIn;\\n            (bool success,) = renCrv.call(abi.encodeWithSelector(ICurveFi.add_liquidity.selector, amounts, 0));\\n            require(success, \\\"!curve\\\");\\n            ISett(bCrvRen).deposit(IERC20(renCrvLp).balanceOf(address(this)));\\n            amountOut = IBadgerSettPeak(settPeak).mint(0, IERC20(bCrvRen).balanceOf(address(this)), new bytes32[](0));\\n        }\\n        function toUSDC(uint256 amountIn, address out) internal returns (uint256 amountOut) {\\n          address[] memory path = new address[](3);\\n          path[0] = renbtc;\\n\\t  path[1] = weth;\\n          path[2] = usdc;\\n          uint256[] memory amountsOut = IUniswapV2Router02(router).swapExactTokensForTokens(amountIn, 1, path, out, block.timestamp + 1);\\n          amountOut = amountsOut[2];\\n        }\\n        function quote() internal {\\n          (uint256 amountWeth, uint256 amountRenBTC) = UniswapV2Library.getReserves(factory, weth, renbtc);\\n          renbtcForOneETHPrice = UniswapV2Library.quote(uint256(1 ether), amountWeth, amountRenBTC);\\n        }\\n        function renBTCtoETH(uint256 amountIn, address out) internal returns (uint256 amountOut) {\\n          address[] memory path = new address[](2);\\n          path[0] = renbtc;\\n          path[1] = weth;\\n          uint256[] memory amountsOut = IUniswapV2Router02(router).swapExactTokensForETH(amountIn, 1, path, out, block.timestamp + 1);\\n          amountOut = amountsOut[1];\\n        }\\n        function fromIBBTC(uint256 amountIn) internal returns (uint256 amountOut) {\\n          uint256 amountStart = IERC20(renbtc).balanceOf(address(this));\\n          IBadgerSettPeak(settPeak).redeem(0, amountIn);\\n          ISett(bCrvRen).withdraw(IERC20(bCrvRen).balanceOf(address(this)));\\n          (bool success,) = renCrv.call(abi.encodeWithSelector(ICurveFi.remove_liquidity_one_coin.selector, IERC20(renCrvLp).balanceOf(address(this)), 0, 0));\\n          require(success, \\\"!curve\\\");\\n          amountOut = IERC20(renbtc).balanceOf(address(this)).sub(amountStart);\\n        }\\n        function fromUSDC(uint256 amountIn) internal returns (uint256 amountOut) {\\n          address[] memory path = new address[](2);\\n          path[0] = usdc;\\n          path[1] = renbtc;\\n          uint256[] memory amountsOut = IUniswapV2Router02(router).swapExactTokensForTokens(amountIn, 1, path, address(this), block.timestamp + 1);\\n          amountOut = amountsOut[1];\\n        }\\n\\tfunction toRenBTC(uint256 amountIn) internal returns (uint256 amountOut) {\\n\\t\\tuint256 balanceStart = IERC20(renbtc).balanceOf(address(this));\\n\\t\\t(bool success, ) = renCrv.call(abi.encodeWithSelector(IRenCrv.exchange.selector, 1, 0, amountIn));\\n\\t\\tamountOut = IERC20(renbtc).balanceOf(address(this)).sub(balanceStart);\\n\\t}\\n\\n\\tfunction toETH() internal returns (uint256 amountOut) {\\n\\t\\tuint256 wbtcStart = IERC20(wbtc).balanceOf(address(this));\\n\\t\\tuint256 amountStart = address(this).balance;\\n\\t\\t(bool success, ) = tricrypto.call(\\n\\t\\t\\tabi.encodeWithSelector(ICurveETHUInt256.exchange.selector, 1, 2, wbtcStart, 0, true)\\n\\t\\t);\\n\\t\\tamountOut = address(this).balance.sub(amountStart);\\n\\t}\\n\\n\\treceive() payable external { \\n\\t\\t// no-op \\n\\t}\\n\\tfunction earn() public {\\n                quote();\\n                toWBTC(IERC20(renbtc).balanceOf(address(this)));\\n\\t\\ttoETH();\\n\\t\\tuint256 balance = address(this).balance;\\n\\t\\tif (balance > ETH_RESERVE) {\\n\\t\\t\\tuint256 output = balance - ETH_RESERVE;\\n\\t\\t\\tuint256 toGovernance = applyRatio(output, governanceFee);\\n                        address payable governancePayable = address(uint160(governance));\\n\\t\\t\\tgovernancePayable.transfer(toGovernance);\\n                        address payable strategistPayable = address(uint160(strategist));\\n\\t\\t\\tstrategistPayable.transfer(output.sub(toGovernance));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction computeRenBTCGasFee(uint256 gasCost, uint256 gasPrice) internal view returns (uint256 result) {\\n          result = gasCost.mul(tx.gasprice).mul(renbtcForOneETHPrice).div(uint256(1 ether));\\n        }\\n\\tfunction deductMintFee(uint256 amountIn, uint256 multiplier) internal view returns (uint256 amount) {\\n\\t\\tamount = amountIn.sub(applyFee(amountIn, fee, multiplier));\\n\\t}\\n\\tfunction deductIBBTCMintFee(uint256 amountIn, uint256 multiplier) internal view returns (uint256 amount) {\\n\\t\\tamount = amountIn.sub(applyIBBTCFee(amountIn, fee, multiplier));\\n\\t}\\n\\tfunction deductBurnFee(uint256 amountIn, uint256 multiplier) internal view returns (uint256 amount) {\\n\\t\\tamount = amountIn.sub(applyFee(amountIn, burnFee, multiplier));\\n\\t}\\n\\tfunction deductIBBTCBurnFee(uint256 amountIn, uint256 multiplier) internal view returns (uint256 amount) {\\n\\t\\tamount = amountIn.sub(applyIBBTCFee(amountIn, burnFee, multiplier));\\n\\t}\\n\\tfunction applyFee(uint256 amountIn, uint256 _fee, uint256 multiplier) internal view returns (uint256 amount) {\\n\\t\\tamount = computeRenBTCGasFee(GAS_COST.add(keeperReward.div(tx.gasprice)), tx.gasprice).add(applyRatio(amountIn, _fee));\\n\\t}\\n        function applyIBBTCFee(uint256 amountIn, uint256 _fee, uint256 multiplier) internal view returns (uint256 amount) {\\n\\t\\tamount = computeRenBTCGasFee(IBBTC_GAS_COST.add(keeperReward.div(tx.gasprice)), tx.gasprice).add(applyRatio(amountIn, _fee));\\n\\t}\\n        struct LoanParams {\\n          address to;\\n          address asset;\\n          uint256 nonce;\\n          uint256 amount;\\n          address module;\\n          address underwriter;\\n          bytes data;\\n          uint256 _mintAmount;\\n\\t  uint256 gasDiff;\\n\\t}\\n\\n\\tfunction toTypedDataHash(LoanParams memory params)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (bytes32 result)\\n\\t{\\n\\t\\tbytes32 digest = _hashTypedDataV4(\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\tkeccak256(\\n\\t\\t\\t\\t\\t\\t'TransferRequest(address asset,uint256 amount,address underwriter,address module,uint256 nonce,bytes data)'\\n\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\tparams.asset,\\n\\t\\t\\t\\t\\tparams.amount,\\n\\t\\t\\t\\t\\tparams.underwriter,\\n\\t\\t\\t\\t\\tparams.module,\\n\\t\\t\\t\\t\\tparams.nonce,\\n\\t\\t\\t\\t\\tkeccak256(params.data)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\treturn digest;\\n\\t}\\n\\n\\tfunction repay(\\n\\t\\taddress underwriter,\\n\\t\\taddress to,\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 actualAmount,\\n\\t\\tuint256 nonce,\\n\\t\\taddress module,\\n\\t\\tbytes32 nHash,\\n\\t\\tbytes memory data,\\n\\t\\tbytes memory signature\\n\\t) public returns (uint256 amountOut) {\\n\\t\\tuint256 _gasBefore = gasleft();\\n\\t\\tLoanParams memory params;\\n\\t\\t{\\n                  require(module == wbtc || module == usdc || module == ibbtc || module == renbtc || module == address(0x0), \\\"!approved-module\\\");\\n\\t\\t\\tparams = LoanParams({\\n\\t\\t\\t\\tto: to,\\n\\t\\t\\t\\tasset: asset,\\n\\t\\t\\t\\tamount: amount,\\n\\t\\t\\t\\tnonce: nonce,\\n\\t\\t\\t\\tmodule: module,\\n\\t\\t\\t\\tunderwriter: underwriter,\\n\\t\\t\\t\\tdata: data,\\n\\t\\t\\t\\t_mintAmount: 0,\\n\\t\\t\\t\\tgasDiff: computeCalldataGasDiff()\\n\\t\\t\\t});\\n\\t\\t}\\n\\t\\tbytes32 digest = toTypedDataHash(params);\\n\\n\\t\\tparams._mintAmount = IGateway(btcGateway).mint(\\n\\t\\t\\tkeccak256(abi.encode(params.to, params.nonce, params.module, params.data)),\\n\\t\\t\\tactualAmount,\\n\\t\\t\\tnHash,\\n\\t\\t\\tsignature\\n\\t\\t);\\n                \\n\\t\\t{\\n                \\tamountOut = module == wbtc ? toWBTC(deductMintFee(params._mintAmount, 1)) : module == address(0x0) ? renBTCtoETH(deductMintFee(params._mintAmount, 1), to) : module == usdc ? toUSDC(deductMintFee(params._mintAmount, 1), to) : module == ibbtc ? toIBBTC(deductIBBTCMintFee(params._mintAmount, 3)) : deductMintFee(params._mintAmount, 1);\\n\\t\\t}\\n\\t\\t{\\n\\t\\t\\tif (module != usdc && module != address(0x0)) IERC20(module).safeTransfer(to, amountOut);\\n\\t\\t}\\n\\t\\t{\\n\\t\\t\\ttx.origin.transfer(Math.min(_gasBefore.sub(gasleft()).add(REPAY_GAS_DIFF).add(params.gasDiff).mul(tx.gasprice).add(keeperReward), address(this).balance));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction computeBurnNonce(\\n\\t\\tBurnLocals memory params\\n\\t) internal view returns (uint256 result) {\\n\\t\\tresult = uint256(keccak256(abi.encodePacked(params.asset, params.amount, params.deadline, params.nonce, params.destination)));\\n\\t\\twhile (result < block.timestamp) {\\n\\t\\t\\t// negligible probability of this\\n\\t\\t\\tresult = uint256(keccak256(abi.encodePacked(result)));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction computeERC20PermitDigest(\\n                bytes32 domainSeparator,\\n\\t\\tBurnLocals memory params\\n\\t) internal view returns (bytes32 result) {\\n\\t\\tresult = keccak256(\\n\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t'\\\\x19\\\\x01',\\n\\t\\t\\t\\tdomainSeparator,\\n\\t\\t\\t\\tkeccak256(abi.encode(PERMIT_TYPEHASH, params.to, address(this), params.nonce, computeBurnNonce(params), true))\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tstruct BurnLocals {\\n\\t  address to;\\n\\t  address asset;\\n\\t  uint256 amount;\\n\\t  uint256 deadline;\\n\\t  uint256 nonce;\\n\\t  uint256 burnNonce;\\n\\t  uint256 gasBefore;\\n\\t  uint256 gasDiff;\\n\\t  uint8 v;\\n\\t  bytes32 r;\\n\\t  bytes32 s;\\n\\t  bytes destination;\\n\\t  bytes signature;\\n\\t}\\n\\n\\tfunction burn(\\n\\t\\taddress to,\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 deadline,\\n\\t\\tbytes memory destination,\\n\\t\\tbytes memory signature\\n\\t) public returns (uint256 amountToBurn) {\\n\\t\\tBurnLocals memory params = BurnLocals({\\n\\t\\t  to: to,\\n\\t\\t  asset: asset,\\n\\t\\t  amount: amount,\\n\\t\\t  deadline: deadline,\\n\\t\\t  nonce: 0,\\n\\t\\t  burnNonce: 0,\\n\\t\\t  v: uint8(0),\\n\\t\\t  r: bytes32(0),\\n\\t\\t  s: bytes32(0),\\n\\t\\t  destination: destination,\\n\\t\\t  signature: signature,\\n                  gasBefore: gasleft(),\\n\\t\\t  gasDiff: 0\\n\\t\\t});\\n\\t\\t{ \\n\\t\\t  params.gasDiff = computeCalldataGasDiff();\\n\\t\\t} \\n\\t\\trequire(block.timestamp < params.deadline, '!deadline');\\n\\t\\tif (params.asset == wbtc) {\\n\\t\\t\\tparams.nonce = nonces[to];\\n\\t\\t\\tnonces[params.to]++;\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tparams.to ==\\n\\t\\t\\t\\t\\tECDSA.recover(\\n\\t\\t\\t\\t\\t\\tcomputeERC20PermitDigest(\\n\\t\\t\\t\\t\\t\\t\\tPERMIT_DOMAIN_SEPARATOR_WBTC,\\n\\t\\t\\t\\t\\t\\t\\tparams\\n\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\tparams.signature\\n\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t'!signature'\\n\\t\\t\\t); //  wbtc does not implement ERC20Permit\\n\\t\\t\\t{\\n\\t\\t\\t\\tIERC20(params.asset).transferFrom(params.to, address(this), params.amount);\\n\\t                        amountToBurn = toRenBTC(deductBurnFee(params.amount, 1));\\n\\t\\t\\t}\\n\\t\\t} else if (asset == ibbtc) {\\n\\t\\t\\tparams.nonce = nonces[to];\\n\\t\\t\\tnonces[to]++;\\n\\t\\t\\trequire(\\n\\t\\t\\t\\tparams.to ==\\n\\t\\t\\t\\t\\tECDSA.recover(\\n\\t\\t\\t\\t\\t\\tcomputeERC20PermitDigest(\\n\\t\\t\\t\\t\\t\\t\\tPERMIT_DOMAIN_SEPARATOR_IBBTC,\\n\\t\\t\\t\\t\\t\\t\\tparams\\n\\t\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t\\t\\tparams.signature\\n\\t\\t\\t\\t\\t),\\n\\t\\t\\t\\t'!signature'\\n\\t\\t\\t); //  wbtc ibbtc do not implement ERC20Permit\\n\\t\\t\\t{\\n\\t\\t\\t\\tIERC20(params.asset).transferFrom(params.to, address(this), params.amount);\\n\\t\\t\\t\\tamountToBurn = deductIBBTCBurnFee(fromIBBTC(params.amount), 3);\\n\\t\\t\\t}\\n\\t\\t} else if (params.asset == renbtc) {\\n\\t\\t\\t{\\n\\t\\t\\t\\tparams.nonce = IERC2612Permit(params.asset).nonces(params.to);\\n\\t\\t\\t\\tparams.burnNonce = computeBurnNonce(params);\\n\\t\\t\\t}\\n\\t\\t\\t{\\n                        \\t(params.v, params.r, params.s) = SplitSignatureLib.splitSignature(params.signature);\\n\\t \\t\\t\\tIERC2612Permit(params.asset).permit(params.to, address(this), params.nonce, params.burnNonce, true, params.v, params.r, params.s);\\n\\t\\t\\t}\\n\\t\\t\\t{\\n\\t\\t\\t\\tIERC20(params.asset).transferFrom(params.to, address(this), params.amount);\\n\\t\\t\\t}\\n\\t\\t\\tamountToBurn = deductBurnFee(params.amount, 1);\\n\\t\\t} else if (params.asset == usdc) {\\n\\t\\t\\t{\\n\\t\\t\\t\\tparams.nonce = IERC2612Permit(params.asset).nonces(params.to);\\n\\t\\t\\t\\tparams.burnNonce = computeBurnNonce(params);\\n\\t\\t\\t}\\n\\t\\t\\t{\\n                        \\t(params.v, params.r, params.s) = SplitSignatureLib.splitSignature(params.signature);\\n\\t \\t\\t\\tIERC2612Permit(params.asset).permit(params.to, address(this), params.amount, params.burnNonce, params.v, params.r, params.s);\\n\\t\\t\\t}\\n\\t\\t\\t{\\n\\t\\t\\t\\tIERC20(params.asset).transferFrom(params.to, address(this), params.amount);\\n\\t\\t\\t}\\n\\t\\t\\tamountToBurn = deductBurnFee(fromUSDC(params.amount), 1);\\n\\t\\t} else revert(\\\"!supported-asset\\\");\\n\\t\\t{\\n\\t        \\tIGateway(btcGateway).burn(params.destination, amountToBurn);\\n\\t\\t}\\n\\t\\t{\\n\\t\\t\\ttx.origin.transfer(Math.min(params.gasBefore.sub(gasleft()).add(BURN_GAS_DIFF).add(params.gasDiff).mul(tx.gasprice).add(keeperReward), address(this).balance));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction fallbackMint(\\n\\t\\taddress underwriter,\\n\\t\\taddress to,\\n\\t\\taddress asset,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 actualAmount,\\n\\t\\tuint256 nonce,\\n\\t\\taddress module,\\n\\t\\tbytes32 nHash,\\n\\t\\tbytes memory data,\\n\\t\\tbytes memory signature\\n\\t) public {\\n\\t\\tLoanParams memory params = LoanParams({\\n\\t\\t\\tto: to,\\n\\t\\t\\tasset: asset,\\n\\t\\t\\tamount: amount,\\n\\t\\t\\tnonce: nonce,\\n\\t\\t\\tmodule: module,\\n\\t\\t\\tunderwriter: underwriter,\\n\\t\\t\\tdata: data,\\n\\t\\t\\t_mintAmount: 0,\\n\\t\\t\\tgasDiff: 0\\n\\t\\t});\\n\\t\\tbytes32 digest = toTypedDataHash(params);\\n\\t\\tuint256 _actualAmount = IGateway(btcGateway).mint(\\n\\t\\t\\tkeccak256(abi.encode(params.to, params.nonce, params.module, params.data)),\\n\\t\\t\\tactualAmount,\\n\\t\\t\\tnHash,\\n\\t\\t\\tsignature\\n\\t\\t);\\n\\t\\tIERC20(asset).safeTransfer(to, _actualAmount);\\n\\t}\\n}\\n\",\"keccak256\":\"0x396770f142ed8c635ae17e3331d52a48dfd9b9364015e23eac5ee44a2efed320\",\"license\":\"MIT\"},\"contracts/interfaces/CurvePools/ICurveETHUInt256.sol\":{\"content\":\"pragma solidity >=0.6.0<0.8.0;\\n\\ninterface ICurveETHUInt256 {\\n\\tfunction exchange(\\n\\t\\tuint256 i,\\n\\t\\tuint256 j,\\n\\t\\tuint256 dx,\\n\\t\\tuint256 min_dy,\\n\\t\\tbool use_eth\\n\\t) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x1dba454362f0003af49bbea8d4a3f69f6d1a0dd11d35c08a555f96763c7f84aa\"},\"contracts/interfaces/CurvePools/IRenCrv.sol\":{\"content\":\"interface IRenCrv {\\n  function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\\n}\\n\",\"keccak256\":\"0x19d4c256d8e4766f7559588c985e76c46317654079e2027b85b03dbb28e93715\"},\"contracts/interfaces/IBadgerSettPeak.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface IBadgerSettPeak {\\n  function mint(uint256, uint256, bytes32[] calldata) external returns (uint256);\\n  function redeem(uint256, uint256) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x9e3e7012903e2072dd020ef8f2d861ab968c3b5886d0a8dce459ab7dbc190d56\",\"license\":\"MIT\"},\"contracts/interfaces/ICurveFi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface ICurveFi {\\n  function add_liquidity(uint256[2] calldata amounts, uint256 idx) external;\\n  function remove_liquidity_one_coin(uint256, int128, uint256) external;\\n}\\n\",\"keccak256\":\"0xa4887bfd13f07529a78c0fc221329c41976198c0d78df836914ceb6cb828b923\",\"license\":\"MIT\"},\"contracts/interfaces/IERC2612Permit.sol\":{\"content\":\"interface IERC2612Permit {\\n\\t/**\\n\\t * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\\n\\t * given `owner`'s signed approval.\\n\\t *\\n\\t * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n\\t * ordering also apply here.\\n\\t *\\n\\t * Emits an {Approval} event.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - `owner` cannot be the zero address.\\n\\t * - `spender` cannot be the zero address.\\n\\t * - `deadline` must be a timestamp in the future.\\n\\t * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n\\t * over the EIP712-formatted function arguments.\\n\\t * - the signature must use ``owner``'s current nonce (see {nonces}).\\n\\t *\\n\\t * For more information on the signature format, see the\\n\\t * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n\\t * section].\\n\\t */\\n\\tfunction permit(\\n\\t\\taddress holder,\\n\\t\\taddress spender,\\n\\t\\tuint256 nonce,\\n\\t\\tuint256 expiry,\\n\\t\\tbool allowed,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\tfunction permit(\\n\\t\\taddress holder,\\n\\t\\taddress spender,\\n\\t\\tuint256 value,\\n                uint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\t/**\\n\\t * @dev Returns the current ERC2612 nonce for `owner`. This value must be\\n\\t * included whenever a signature is generated for {permit}.\\n\\t *\\n\\t * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n\\t * prevents a signature from being used multiple times.\\n\\t */\\n\\tfunction nonces(address owner) external view returns (uint256);\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x014614238c09c4cd2a43cc4c84b4d3caf0f0eb9c3364f8ba7bfc63f3f2305047\"},\"contracts/interfaces/IGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.8.0;\\n\\ninterface IMintGateway {\\n\\tfunction mint(\\n\\t\\tbytes32 _pHash,\\n\\t\\tuint256 _amount,\\n\\t\\tbytes32 _nHash,\\n\\t\\tbytes calldata _sig\\n\\t) external returns (uint256);\\n\\n\\tfunction mintFee() external view returns (uint256);\\n}\\n\\ninterface IBurnGateway {\\n\\tfunction burn(bytes memory _to, uint256 _amountScaled) external returns (uint256);\\n\\n\\tfunction burnFee() external view returns (uint256);\\n}\\n\\ninterface IGateway is IMintGateway, IBurnGateway {\\n\\n}\\n\\n/*\\ninterface IGateway is IMintGateway, IBurnGateway {\\n    function mint(\\n        bytes32 _pHash,\\n        uint256 _amount,\\n        bytes32 _nHash,\\n        bytes calldata _sig\\n    ) external returns (uint256);\\n\\n    function mintFee() external view returns (uint256);\\n\\n    function burn(bytes calldata _to, uint256 _amountScaled)\\n        external\\n        returns (uint256);\\n\\n    function burnFee() external view returns (uint256);\\n}\\n*/\\n\",\"keccak256\":\"0xaa99ee2c55972f8ffbc3e2169cba4653960324a48e55125faa8133eb5efeaea6\",\"license\":\"MIT\"},\"contracts/interfaces/ISett.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\ninterface ISett {\\n  function deposit(uint256) external;\\n  function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x8f47ebda288fecda2175042d0dcd13c74d2dda82109ba256e8959fd90ce538c5\",\"license\":\"MIT\"},\"contracts/interfaces/IyVault.sol\":{\"content\":\"pragma solidity >=0.6.0<0.8.0;\\n\\nimport {IERC20} from 'oz410/token/ERC20/IERC20.sol';\\n\\nabstract contract IyVault is IERC20 {\\n\\tfunction pricePerShare() external view virtual returns (uint256);\\n\\n\\tfunction getPricePerFullShare() external view virtual returns (uint256);\\n\\n\\tfunction totalAssets() external view virtual returns (uint256);\\n\\n\\tfunction deposit(uint256 _amount) external virtual returns (uint256);\\n\\n\\tfunction withdraw(uint256 maxShares) external virtual returns (uint256);\\n\\n\\tfunction want() external virtual returns (address);\\n\\n\\tfunction decimals() external view virtual returns (uint8);\\n}\\n\",\"keccak256\":\"0x78dedb601c27da3b4f832692b91f47f9f70f1c0aea81ac8f0915253242bc589d\"},\"contracts/libraries/SplitSignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\nlibrary SplitSignatureLib {\\n\\tfunction splitSignature(bytes memory signature)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (\\n\\t\\t\\tuint8 v,\\n\\t\\t\\tbytes32 r,\\n\\t\\t\\tbytes32 s\\n\\t\\t)\\n\\t{\\n\\t\\tif (signature.length == 65) {\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := mload(add(signature, 0x20))\\n\\t\\t\\t\\ts := mload(add(signature, 0x40))\\n\\t\\t\\t\\tv := byte(0, mload(add(signature, 0x60)))\\n\\t\\t\\t}\\n\\t\\t} else if (signature.length == 64) {\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := mload(add(signature, 0x20))\\n\\t\\t\\t\\tlet vs := mload(add(signature, 0x40))\\n\\t\\t\\t\\ts := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n\\t\\t\\t\\tv := add(shr(255, vs), 27)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x200450fa14f5005ac52cf8265b47ff3e9b078b4ac67c0b67e92fcbc91ca81b87\",\"license\":\"MIT\"},\"contracts/libraries/UniswapV2Library.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(uint160(uint(keccak256(abi.encodePacked(\\n                hex'ff',\\n                factory,\\n                keccak256(abi.encodePacked(token0, token1)),\\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n            )))));\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n}\\n\",\"keccak256\":\"0x18c6f664fd40da35b918633311279e2ea1b023f39e8abe0a44f7b058af957b33\"},\"contracts/libraries/ZeroLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.8.0;\\n\\n/**\\n@title helper functions for the Zero contract suite\\n@author raymondpulver\\n*/\\nlibrary ZeroLib {\\n\\tenum LoanStatusCode {\\n\\t\\tUNINITIALIZED,\\n\\t\\tUNPAID,\\n\\t\\tPAID\\n\\t}\\n\\tstruct LoanParams {\\n\\t\\taddress to;\\n\\t\\taddress asset;\\n\\t\\tuint256 amount;\\n\\t\\tuint256 nonce;\\n\\t\\taddress module;\\n\\t\\tbytes data;\\n\\t}\\n\\tstruct MetaParams {\\n\\t\\taddress from;\\n\\t\\tuint256 nonce;\\n\\t\\tbytes data;\\n\\t\\taddress module;\\n\\t\\taddress asset;\\n\\t}\\n\\tstruct LoanStatus {\\n\\t\\taddress underwriter;\\n\\t\\tLoanStatusCode status;\\n\\t}\\n\\tstruct BalanceSheet {\\n\\t\\tuint128 loaned;\\n\\t\\tuint128 required;\\n\\t\\tuint256 repaid;\\n\\t}\\n}\\n\",\"keccak256\":\"0xc1748ca79d234a66fc9e4f4a8ac960d4dbb2140349a7edbe9c7d6b9b572b3179\",\"license\":\"MIT\"},\"contracts/proxy/BadgerBridgeZeroControllerDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport { BadgerBridgeZeroController } from \\\"../controllers/BadgerBridgeZeroController.sol\\\";\\nimport { TransparentUpgradeableProxy } from \\\"@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol\\\";\\nimport { ProxyAdmin } from \\\"@openzeppelin/contracts/proxy/ProxyAdmin.sol\\\";\\n\\ncontract BadgerBridgeZeroControllerDeployer {\\n  address constant governance = 0x5E9B37149b7d7611bD0Eb070194dDA78EB11EfdC;\\n  event Deployment(address indexed proxy);\\n  constructor() {\\n    address logic = address(new BadgerBridgeZeroController());\\n    address proxy = address(new ProxyAdmin()); \\n    ProxyAdmin(proxy).transferOwnership(governance);\\n    emit Deployment(address(new TransparentUpgradeableProxy(logic, proxy, abi.encodeWithSelector(BadgerBridgeZeroController.initialize.selector, governance, governance))));\\n    selfdestruct(msg.sender);\\n  }\\n}\\n\",\"keccak256\":\"0xea25cf73555949930ee5150b5f9ce5e7d61dfe6709688ead7f0b334472472cbf\",\"license\":\"MIT\"},\"oz410/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600080fdfea26469706673582212204189218f64d396a880fda3e5a7b8df657c03265f2e33f08ea492fafec66a7e0f64736f6c63430007060033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}