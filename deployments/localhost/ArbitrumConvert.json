{
  "address": "0x9A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "blockTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_in",
          "type": "uint256"
        }
      ],
      "name": "computeReserveRequirement",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "defaultLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "outstanding",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "when",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "qtyETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_actual",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "receiveLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renCrvArbitrum",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_actualAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "repayLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ct",
          "type": "uint256"
        }
      ],
      "name": "setBlockTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tricryptoArbitrum",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "want",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wbtc",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weth",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x20facf6a7409d761ffa151642f038c767f0cbd6907e0e575a79ed9416095ba4f",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9A9f2CCfdE556A7E9Ff0848998Aa4a0CFD8863AE",
    "transactionIndex": 0,
    "gasUsed": "1326535",
    "logsBloom": "0x000000000400008000000000000000000000000080000000000020000002000000000000000000000000000000000000000000000080000000000000002000000000000000000000000000000000000000000000400000000000000000000000000000000000000400000000000000000000000000000000800000000000000000000000000000000000000000400000000000000000000000000800000000000200000000000000000000000000000010000000c0000000000000000000800000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x2943ba16f1f028731b2e44c819f8e7c736eedd13dd81edc1875276a149e79014",
    "transactionHash": "0x20facf6a7409d761ffa151642f038c767f0cbd6907e0e575a79ed9416095ba4f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9559964,
        "transactionHash": "0x20facf6a7409d761ffa151642f038c767f0cbd6907e0e575a79ed9416095ba4f",
        "address": "0xDBf31dF14B66535aF65AaC99C32e9eA844e14501",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000009a9f2ccfde556a7e9ff0848998aa4a0cfd8863ae",
          "0x0000000000000000000000003e01dd8a5e1fb3481f0f589056b428fc308af0fb"
        ],
        "data": "0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 0,
        "blockHash": "0x2943ba16f1f028731b2e44c819f8e7c736eedd13dd81edc1875276a149e79014"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9559964,
        "transactionHash": "0x20facf6a7409d761ffa151642f038c767f0cbd6907e0e575a79ed9416095ba4f",
        "address": "0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000009a9f2ccfde556a7e9ff0848998aa4a0cfd8863ae",
          "0x000000000000000000000000960ea3e3c7fb317332d990873d354e18d7645590"
        ],
        "data": "0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 1,
        "blockHash": "0x2943ba16f1f028731b2e44c819f8e7c736eedd13dd81edc1875276a149e79014"
      }
    ],
    "blockNumber": 9559964,
    "cumulativeGasUsed": "1326535",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318"
  ],
  "numDeployments": 1,
  "solcInputHash": "51d3199d65c4334977e3788d36546f47",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"blockTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_in\",\"type\":\"uint256\"}],\"name\":\"computeReserveRequirement\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"defaultLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"outstanding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"when\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"qtyETH\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actual\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"receiveLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renCrvArbitrum\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_actualAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"repayLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ct\",\"type\":\"uint256\"}],\"name\":\"setBlockTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tricryptoArbitrum\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wbtc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/modules/ArbitrumConvert.sol\":\"ArbitrumConvert\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/interfaces/CurvePools/ICurveETHUInt256.sol\":{\"content\":\"pragma solidity >=0.6.0<0.8.0;\\n\\ninterface ICurveETHUInt256 {\\n\\tfunction exchange(\\n\\t\\tuint256 i,\\n\\t\\tuint256 j,\\n\\t\\tuint256 dx,\\n\\t\\tuint256 min_dy,\\n\\t\\tbool use_eth\\n\\t) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x1dba454362f0003af49bbea8d4a3f69f6d1a0dd11d35c08a555f96763c7f84aa\"},\"contracts/interfaces/CurvePools/IRenCrvArbitrum.sol\":{\"content\":\"interface IRenCrvArbitrum {\\n\\tfunction exchange(\\n\\t\\tint128 i,\\n\\t\\tint128 j,\\n\\t\\tuint256 dx,\\n\\t\\tuint256 min_dy,\\n\\t\\taddress recipient\\n\\t) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x05b69c3d847626fe7f4b281246ac8d525b0aef73718680e159dc5ad80595fcc4\"},\"contracts/interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0<0.8.0;\\n\\ninterface IController {\\n\\tfunction governance() external view returns (address);\\n\\n\\tfunction rewards() external view returns (address);\\n\\n\\tfunction withdraw(address, uint256) external;\\n\\n\\tfunction balanceOf(address) external view returns (uint256);\\n\\n\\tfunction earn(address, uint256) external;\\n\\n\\tfunction want(address) external view returns (address);\\n\\n\\tfunction vaults(address) external view returns (address);\\n\\n\\tfunction strategies(address) external view returns (address);\\n\\n\\tfunction approvedStrategies(address, address) external view returns (bool);\\n\\n\\tfunction converters(address, address) external view returns (address);\\n}\\n\",\"keccak256\":\"0x8114fbb541ce2c5ec8997f14a6e8cb11c8acbc86239bdae9cecb864406bde9ad\",\"license\":\"MIT\"},\"contracts/interfaces/IZeroModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\ninterface IZeroModule {\\n\\tfunction repayLoan(\\n\\t\\taddress _to,\\n\\t\\taddress _asset,\\n\\t\\tuint256 _actualAmount,\\n\\t\\tuint256 _amount,\\n\\t\\tbytes memory _data\\n\\t) external;\\n\\n\\tfunction receiveLoan(\\n\\t\\taddress _to,\\n\\t\\taddress _asset,\\n\\t\\tuint256 _actual,\\n\\t\\tuint256 _nonce,\\n\\t\\tbytes memory _data\\n\\t) external;\\n\\n\\tfunction computeReserveRequirement(uint256 _in) external view returns (uint256);\\n\\n\\tfunction want() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa2a04ea76bc1cd25aa9d71fb9af8047ad303d8f48c917cde2f62575fa89a5c98\",\"license\":\"MIT\"},\"contracts/modules/ArbitrumConvert.sol\":{\"content\":\"pragma solidity >=0.6.0 <0.8.0;\\nimport {ArbitrumConvertLib} from './ArbitrumConvertLib.sol';\\nimport {SafeMath} from 'oz410/math/SafeMath.sol';\\nimport {IERC20} from 'oz410/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from 'oz410/token/ERC20/SafeERC20.sol';\\nimport {IController} from '../interfaces/IController.sol';\\nimport {ICurveETHUInt256} from '../interfaces/CurvePools/ICurveETHUInt256.sol';\\nimport {IRenCrvArbitrum} from '../interfaces/CurvePools/IRenCrvArbitrum.sol';\\nimport {IZeroModule} from '../interfaces/IZeroModule.sol';\\n\\ncontract ArbitrumConvert is IZeroModule {\\n\\tusing SafeERC20 for *;\\n\\tusing SafeMath for *;\\n\\tmapping(uint256 => ArbitrumConvertLib.ConvertRecord) public outstanding;\\n\\taddress public immutable controller;\\n\\taddress public immutable governance;\\n\\tuint256 public blockTimeout;\\n\\taddress public constant weth = 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1;\\n\\taddress public constant wbtc = 0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f;\\n\\taddress public constant override want = 0xDBf31dF14B66535aF65AaC99C32e9eA844e14501;\\n\\taddress public constant renCrvArbitrum = 0x3E01dD8a5E1fb3481F0F589056b428Fc308AF0Fb;\\n\\taddress public constant tricryptoArbitrum = 0x960ea3e3C7FB317332d990873d354E18d7645590;\\n\\tmodifier onlyController() {\\n\\t\\trequire(msg.sender == controller, '!controller');\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(address _controller) {\\n\\t\\tcontroller = _controller;\\n\\t\\tgovernance = IController(_controller).governance();\\n\\t\\tIERC20(want).safeApprove(renCrvArbitrum, ~uint256(0) >> 2);\\n\\t\\tIERC20(wbtc).safeApprove(tricryptoArbitrum, ~uint256(0) >> 2);\\n\\t}\\n\\n\\tfunction setBlockTimeout(uint256 _ct) public {\\n\\t\\trequire(msg.sender == governance, '!governance');\\n\\t\\tblockTimeout = _ct;\\n\\t}\\n\\n\\tfunction isActive(ArbitrumConvertLib.ConvertRecord storage record) internal view returns (bool) {\\n\\t\\treturn record.qty != 0 || record.qtyETH != 0;\\n\\t}\\n\\n\\tfunction defaultLoan(uint256 _nonce) public {\\n\\t\\trequire(block.number >= outstanding[_nonce].when + blockTimeout);\\n\\t\\trequire(isActive(outstanding[_nonce]), '!outstanding');\\n\\t\\tuint256 _amountSwappedBack = swapTokensBack(outstanding[_nonce]);\\n\\t\\tIERC20(want).safeTransfer(controller, _amountSwappedBack);\\n\\t\\tdelete outstanding[_nonce];\\n\\t}\\n\\n\\tfunction receiveLoan(\\n\\t\\taddress _to,\\n\\t\\taddress _asset,\\n\\t\\tuint256 _actual,\\n\\t\\tuint256 _nonce,\\n\\t\\tbytes memory _data\\n\\t) public override onlyController {\\n\\t\\tuint256 ratio = abi.decode(_data, (uint256));\\n\\t\\t(uint256 amountSwappedETH, uint256 amountSwappedBTC) = swapTokens(_actual, ratio);\\n\\t\\toutstanding[_nonce] = ArbitrumConvertLib.ConvertRecord({\\n\\t\\t\\tqty: amountSwappedBTC,\\n\\t\\t\\twhen: uint64(block.timestamp),\\n\\t\\t\\tqtyETH: amountSwappedETH\\n\\t\\t});\\n\\t}\\n\\n\\tfunction swapTokens(uint256 _amountIn, uint256 _ratio)\\n\\t\\tinternal\\n\\t\\treturns (uint256 amountSwappedETH, uint256 amountSwappedBTC)\\n\\t{\\n\\t\\tuint256 amountToETH = _ratio.mul(_amountIn).div(uint256(1 ether));\\n\\t\\tuint256 wbtcOut = amountToETH != 0\\n\\t\\t\\t? IRenCrvArbitrum(renCrvArbitrum).exchange(1, 0, amountToETH, 0, address(this))\\n\\t\\t\\t: 0;\\n\\t\\tif (wbtcOut != 0) {\\n\\t\\t\\tuint256 _amountStart = address(this).balance;\\n\\t\\t\\t(bool success, ) = tricryptoArbitrum.call(\\n\\t\\t\\t\\tabi.encodeWithSelector(ICurveETHUInt256.exchange.selector, 1, 2, wbtcOut, 0, true)\\n\\t\\t\\t);\\n\\t\\t\\trequire(success, '!exchange');\\n\\t\\t\\tamountSwappedETH = address(this).balance.sub(_amountStart);\\n\\t\\t\\tamountSwappedBTC = _amountIn.sub(amountToETH);\\n\\t\\t} else {\\n\\t\\t\\tamountSwappedBTC = _amountIn;\\n\\t\\t}\\n\\t}\\n\\n\\treceive() external payable {\\n\\t\\t// no-op\\n\\t}\\n\\n\\tfunction swapTokensBack(ArbitrumConvertLib.ConvertRecord storage record) internal returns (uint256 amountReturned) {\\n\\t\\tuint256 _amountStart = IERC20(wbtc).balanceOf(address(this));\\n\\t\\t(bool success, ) = tricryptoArbitrum.call{value: record.qtyETH}(\\n\\t\\t\\tabi.encodeWithSelector(ICurveETHUInt256.exchange.selector, 2, 1, record.qtyETH, 0, true)\\n\\t\\t);\\n\\t\\trequire(success, '!exchange');\\n\\t\\tuint256 wbtcOut = IERC20(wbtc).balanceOf(address(this));\\n\\t\\tamountReturned = IRenCrvArbitrum(renCrvArbitrum).exchange(0, 1, wbtcOut, 0, address(this)).add(record.qty);\\n\\t}\\n\\n\\tfunction repayLoan(\\n\\t\\taddress _to,\\n\\t\\taddress _asset,\\n\\t\\tuint256 _actualAmount,\\n\\t\\tuint256 _nonce,\\n\\t\\tbytes memory _data\\n\\t) public override onlyController {\\n\\t\\trequire(outstanding[_nonce].qty != 0 || outstanding[_nonce].qtyETH != 0, '!outstanding');\\n\\t\\tIERC20(want).safeTransfer(_to, outstanding[_nonce].qty);\\n\\t\\taddress payable to = address(uint160(_to));\\n\\t\\tto.transfer(outstanding[_nonce].qtyETH);\\n\\t\\tdelete outstanding[_nonce];\\n\\t}\\n\\n\\tfunction computeReserveRequirement(uint256 _in) external view override returns (uint256) {\\n\\t\\treturn _in.mul(uint256(1e17)).div(uint256(1 ether));\\n\\t}\\n}\\n\",\"keccak256\":\"0x54c8f8ebe7869b53ade356ff7fad018300f377ed962a301f63382d7b9c94d8f0\"},\"contracts/modules/ArbitrumConvertLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\nlibrary ArbitrumConvertLib {\\n  struct ConvertRecord {\\n    uint256 when;\\n    uint256 qty;\\n    uint256 qtyETH;\\n  }\\n}\\n\",\"keccak256\":\"0x6c2c4a7b56ae89a99d8955d42d3e31abf17117ae44de7e8cbdc7f2a893d8b216\",\"license\":\"MIT\"},\"oz410/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"oz410/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"oz410/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"oz410/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001b3338038062001b33833981810160405260208110156200003757600080fd5b50516001600160601b0319606082901b1660805260408051635aa6e67560e01b815290516001600160a01b03831691635aa6e675916004808301926020929190829003018186803b1580156200008c57600080fd5b505afa158015620000a1573d6000803e3d6000fd5b505050506040513d6020811015620000b857600080fd5b505160601b6001600160601b03191660a0526200011273dbf31df14b66535af65aac99c32e9ea844e14501733e01dd8a5e1fb3481f0f589056b428fc308af0fb6001600160fe1b0362000161602090811b6200090317901c565b6200015a732f2a2543b76a4166549f7aab2e75bef0aefc5b0f73960ea3e3c7fb317332d990873d354e18d76455906001600160fe1b0362000161602090811b6200090317901c565b5062000573565b801580620001eb575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015620001bb57600080fd5b505afa158015620001d0573d6000803e3d6000fd5b505050506040513d6020811015620001e757600080fd5b5051155b620002285760405162461bcd60e51b815260040180806020018281038252603681526020018062001afd6036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620002809185916200028516565b505050565b6000620002e1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166200034160201b62000a1b179092919060201c565b80519091501562000280578080602001905160208110156200030257600080fd5b5051620002805760405162461bcd60e51b815260040180806020018281038252602a81526020018062001ad3602a913960400191505060405180910390fd5b60606200035284846000856200035c565b90505b9392505050565b6060824710156200039f5760405162461bcd60e51b815260040180806020018281038252602681526020018062001aad6026913960400191505060405180910390fd5b620003aa85620004c3565b620003fc576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106200043c5780518252601f1990920191602091820191016200041b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114620004a0576040519150601f19603f3d011682016040523d82523d6000602084013e620004a5565b606091505b509092509050620004b8828286620004c9565b979650505050505050565b3b151590565b60608315620004da57508162000355565b825115620004eb5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620005375781810151838201526020016200051d565b50505050905090810190601f168015620005655780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60805160601c60a05160601c6114fc620005b16000398061044652806105d45250806104b652806106b75280610768528061079552506114fc6000f3fe6080604052600436106100e15760003560e01c806367bf61c41161007f578063874a0e7311610059578063874a0e73146102f1578063a7f6ad1414610339578063f77c47911461034e578063fd8e915414610363576100e8565b806367bf61c41461027657806373883a2b146102a057806380e71655146102dc576100e8565b80633cdc5389116100bb5780633cdc5389146102225780633fc8cef3146102375780635aa6e6751461024c5780635b496f7514610261576100e8565b8063086d3c7a146100ed5780631639743b146101195780631f1fcd51146101f1576100e8565b366100e857005b600080fd5b3480156100f957600080fd5b506101176004803603602081101561011057600080fd5b503561043b565b005b34801561012557600080fd5b50610117600480360360a081101561013c57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a08101608082013564010000000081111561017c57600080fd5b82018360208201111561018e57600080fd5b803590602001918460018302840111640100000000831117156101b057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506104ab945050505050565b3480156101fd57600080fd5b5061020661058a565b604080516001600160a01b039092168252519081900360200190f35b34801561022e57600080fd5b506102066105a2565b34801561024357600080fd5b506102066105ba565b34801561025857600080fd5b506102066105d2565b34801561026d57600080fd5b506102066105f6565b34801561028257600080fd5b506101176004803603602081101561029957600080fd5b503561060e565b3480156102ac57600080fd5b506102ca600480360360208110156102c357600080fd5b50356106fb565b60408051918252519081900360200190f35b3480156102e857600080fd5b506102ca610727565b3480156102fd57600080fd5b5061031b6004803603602081101561031457600080fd5b503561072d565b60408051938452602084019290925282820152519081900360600190f35b34801561034557600080fd5b5061020661074e565b34801561035a57600080fd5b50610206610766565b34801561036f57600080fd5b50610117600480360360a081101561038657600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a0810160808201356401000000008111156103c657600080fd5b8201836020820111156103d857600080fd5b803590602001918460018302840111640100000000831117156103fa57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061078a945050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104a6576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600155565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610516576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b600081806020019051602081101561052d57600080fd5b5051905060008061053e8684610a34565b6040805160608101825267ffffffffffffffff4216815260208082019384528183019485526000998a528990529720965187555160018701555160029095019490945550505050505050565b73dbf31df14b66535af65aac99c32e9ea844e1450181565b732f2a2543b76a4166549f7aab2e75bef0aefc5b0f81565b7382af49447d8a07e3bd95bd0d56f35241523fbab181565b7f000000000000000000000000000000000000000000000000000000000000000081565b73960ea3e3c7fb317332d990873d354e18d764559081565b6001546000828152602081905260409020540143101561062d57600080fd5b600081815260208190526040902061064490610c77565b610684576040805162461bcd60e51b815260206004820152600c60248201526b216f75747374616e64696e6760a01b604482015290519081900360640190fd5b600081815260208190526040812061069b90610c92565b90506106dc73dbf31df14b66535af65aac99c32e9ea844e145017f000000000000000000000000000000000000000000000000000000000000000083610fa0565b5060009081526020819052604081208181556001810182905560020155565b6000610721670de0b6b3a764000061071b8467016345785d8a0000610ff2565b9061104b565b92915050565b60015481565b60006020819052908152604090208054600182015460029092015490919083565b733e01dd8a5e1fb3481f0f589056b428fc308af0fb81565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107f5576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b600082815260208190526040902060010154151580610824575060008281526020819052604090206002015415155b610864576040805162461bcd60e51b815260206004820152600c60248201526b216f75747374616e64696e6760a01b604482015290519081900360640190fd5b6000828152602081905260409020600101546108979073dbf31df14b66535af65aac99c32e9ea844e14501908790610fa0565b60008281526020819052604080822060020154905187926001600160a01b0384169280156108fc02929091818181858888f193505050501580156108df573d6000803e3d6000fd5b50505060009081526020819052604081208181556001810182905560020155505050565b801580610989575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561095b57600080fd5b505afa15801561096f573d6000803e3d6000fd5b505050506040513d602081101561098557600080fd5b5051155b6109c45760405162461bcd60e51b81526004018080602001828103825260368152602001806114916036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610a169084906110b2565b505050565b6060610a2a8484600085611163565b90505b9392505050565b60008080610a4e670de0b6b3a764000061071b8688610ff2565b9050600081610a5e576000610afe565b6040805163ddc1f59d60e01b81526001600482015260006024820181905260448201859052606482018190523060848301529151733e01dd8a5e1fb3481f0f589056b428fc308af0fb9263ddc1f59d9260a480820193602093909283900390910190829087803b158015610ad157600080fd5b505af1158015610ae5573d6000803e3d6000fd5b505050506040513d6020811015610afb57600080fd5b50515b90508015610c6a5760408051600160248201819052600260448301526064820184905260006084830181905260a4808401929092528351808403909201825260c490920183526020810180516001600160e01b031663394747c560e01b17815292518151479473960ea3e3c7fb317332d990873d354e18d76455909392918291908083835b60208310610ba25780518252601f199092019160209182019101610b83565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610c04576040519150601f19603f3d011682016040523d82523d6000602084013e610c09565b606091505b5050905080610c4b576040805162461bcd60e51b81526020600482015260096024820152682165786368616e676560b81b604482015290519081900360640190fd5b610c5547836112be565b9550610c6188856112be565b94505050610c6e565b8592505b50509250929050565b60008160010154600014158061072157505060020154151590565b604080516370a0823160e01b815230600482015290516000918291732f2a2543b76a4166549f7aab2e75bef0aefc5b0f916370a08231916024808301926020929190829003018186803b158015610ce857600080fd5b505afa158015610cfc573d6000803e3d6000fd5b505050506040513d6020811015610d1257600080fd5b50516002808501546040805160248101939093526001604484018190526064840183905260006084850181905260a4808601929092528251808603909201825260c490940182526020810180516001600160e01b031663394747c560e01b17815291518151959650939473960ea3e3c7fb317332d990873d354e18d764559094919282918083835b60208310610db95780518252601f199092019160209182019101610d9a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610e1b576040519150601f19603f3d011682016040523d82523d6000602084013e610e20565b606091505b5050905080610e62576040805162461bcd60e51b81526020600482015260096024820152682165786368616e676560b81b604482015290519081900360640190fd5b604080516370a0823160e01b81523060048201529051600091732f2a2543b76a4166549f7aab2e75bef0aefc5b0f916370a0823191602480820192602092909190829003018186803b158015610eb757600080fd5b505afa158015610ecb573d6000803e3d6000fd5b505050506040513d6020811015610ee157600080fd5b50516001808701546040805163ddc1f59d60e01b8152600060048201819052602482019490945260448101859052606481018490523060848201529051939450610f97939192733e01dd8a5e1fb3481f0f589056b428fc308af0fb9263ddc1f59d9260a4808201936020939283900390910190829087803b158015610f6557600080fd5b505af1158015610f79573d6000803e3d6000fd5b505050506040513d6020811015610f8f57600080fd5b50519061131b565b95945050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a169084906110b2565b60008261100157506000610721565b8282028284828161100e57fe5b0414610a2d5760405162461bcd60e51b81526004018080602001828103825260218152602001806114466021913960400191505060405180910390fd5b60008082116110a1576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816110aa57fe5b049392505050565b6000611107826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a1b9092919063ffffffff16565b805190915015610a165780806020019051602081101561112657600080fd5b5051610a165760405162461bcd60e51b815260040180806020018281038252602a815260200180611467602a913960400191505060405180910390fd5b6060824710156111a45760405162461bcd60e51b81526004018080602001828103825260268152602001806114206026913960400191505060405180910390fd5b6111ad85611375565b6111fe576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b6020831061123c5780518252601f19909201916020918201910161121d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461129e576040519150601f19603f3d011682016040523d82523d6000602084013e6112a3565b606091505b50915091506112b382828661137b565b979650505050505050565b600082821115611315576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015610a2d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3b151590565b6060831561138a575081610a2d565b82511561139a5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156113e45781810151838201526020016113cc565b50505050905090810190601f1680156114115780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212203f57863be5c02c31fd0bc6f62b61b730207645359a708ee4b5a4cf42f3f2273864736f6c63430007060033416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
  "deployedBytecode": "0x6080604052600436106100e15760003560e01c806367bf61c41161007f578063874a0e7311610059578063874a0e73146102f1578063a7f6ad1414610339578063f77c47911461034e578063fd8e915414610363576100e8565b806367bf61c41461027657806373883a2b146102a057806380e71655146102dc576100e8565b80633cdc5389116100bb5780633cdc5389146102225780633fc8cef3146102375780635aa6e6751461024c5780635b496f7514610261576100e8565b8063086d3c7a146100ed5780631639743b146101195780631f1fcd51146101f1576100e8565b366100e857005b600080fd5b3480156100f957600080fd5b506101176004803603602081101561011057600080fd5b503561043b565b005b34801561012557600080fd5b50610117600480360360a081101561013c57600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a08101608082013564010000000081111561017c57600080fd5b82018360208201111561018e57600080fd5b803590602001918460018302840111640100000000831117156101b057600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295506104ab945050505050565b3480156101fd57600080fd5b5061020661058a565b604080516001600160a01b039092168252519081900360200190f35b34801561022e57600080fd5b506102066105a2565b34801561024357600080fd5b506102066105ba565b34801561025857600080fd5b506102066105d2565b34801561026d57600080fd5b506102066105f6565b34801561028257600080fd5b506101176004803603602081101561029957600080fd5b503561060e565b3480156102ac57600080fd5b506102ca600480360360208110156102c357600080fd5b50356106fb565b60408051918252519081900360200190f35b3480156102e857600080fd5b506102ca610727565b3480156102fd57600080fd5b5061031b6004803603602081101561031457600080fd5b503561072d565b60408051938452602084019290925282820152519081900360600190f35b34801561034557600080fd5b5061020661074e565b34801561035a57600080fd5b50610206610766565b34801561036f57600080fd5b50610117600480360360a081101561038657600080fd5b6001600160a01b03823581169260208101359091169160408201359160608101359181019060a0810160808201356401000000008111156103c657600080fd5b8201836020820111156103d857600080fd5b803590602001918460018302840111640100000000831117156103fa57600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061078a945050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104a6576040805162461bcd60e51b815260206004820152600b60248201526a21676f7665726e616e636560a81b604482015290519081900360640190fd5b600155565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610516576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b600081806020019051602081101561052d57600080fd5b5051905060008061053e8684610a34565b6040805160608101825267ffffffffffffffff4216815260208082019384528183019485526000998a528990529720965187555160018701555160029095019490945550505050505050565b73dbf31df14b66535af65aac99c32e9ea844e1450181565b732f2a2543b76a4166549f7aab2e75bef0aefc5b0f81565b7382af49447d8a07e3bd95bd0d56f35241523fbab181565b7f000000000000000000000000000000000000000000000000000000000000000081565b73960ea3e3c7fb317332d990873d354e18d764559081565b6001546000828152602081905260409020540143101561062d57600080fd5b600081815260208190526040902061064490610c77565b610684576040805162461bcd60e51b815260206004820152600c60248201526b216f75747374616e64696e6760a01b604482015290519081900360640190fd5b600081815260208190526040812061069b90610c92565b90506106dc73dbf31df14b66535af65aac99c32e9ea844e145017f000000000000000000000000000000000000000000000000000000000000000083610fa0565b5060009081526020819052604081208181556001810182905560020155565b6000610721670de0b6b3a764000061071b8467016345785d8a0000610ff2565b9061104b565b92915050565b60015481565b60006020819052908152604090208054600182015460029092015490919083565b733e01dd8a5e1fb3481f0f589056b428fc308af0fb81565b7f000000000000000000000000000000000000000000000000000000000000000081565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146107f5576040805162461bcd60e51b815260206004820152600b60248201526a10b1b7b73a3937b63632b960a91b604482015290519081900360640190fd5b600082815260208190526040902060010154151580610824575060008281526020819052604090206002015415155b610864576040805162461bcd60e51b815260206004820152600c60248201526b216f75747374616e64696e6760a01b604482015290519081900360640190fd5b6000828152602081905260409020600101546108979073dbf31df14b66535af65aac99c32e9ea844e14501908790610fa0565b60008281526020819052604080822060020154905187926001600160a01b0384169280156108fc02929091818181858888f193505050501580156108df573d6000803e3d6000fd5b50505060009081526020819052604081208181556001810182905560020155505050565b801580610989575060408051636eb1769f60e11b81523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b15801561095b57600080fd5b505afa15801561096f573d6000803e3d6000fd5b505050506040513d602081101561098557600080fd5b5051155b6109c45760405162461bcd60e51b81526004018080602001828103825260368152602001806114916036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052610a169084906110b2565b505050565b6060610a2a8484600085611163565b90505b9392505050565b60008080610a4e670de0b6b3a764000061071b8688610ff2565b9050600081610a5e576000610afe565b6040805163ddc1f59d60e01b81526001600482015260006024820181905260448201859052606482018190523060848301529151733e01dd8a5e1fb3481f0f589056b428fc308af0fb9263ddc1f59d9260a480820193602093909283900390910190829087803b158015610ad157600080fd5b505af1158015610ae5573d6000803e3d6000fd5b505050506040513d6020811015610afb57600080fd5b50515b90508015610c6a5760408051600160248201819052600260448301526064820184905260006084830181905260a4808401929092528351808403909201825260c490920183526020810180516001600160e01b031663394747c560e01b17815292518151479473960ea3e3c7fb317332d990873d354e18d76455909392918291908083835b60208310610ba25780518252601f199092019160209182019101610b83565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610c04576040519150601f19603f3d011682016040523d82523d6000602084013e610c09565b606091505b5050905080610c4b576040805162461bcd60e51b81526020600482015260096024820152682165786368616e676560b81b604482015290519081900360640190fd5b610c5547836112be565b9550610c6188856112be565b94505050610c6e565b8592505b50509250929050565b60008160010154600014158061072157505060020154151590565b604080516370a0823160e01b815230600482015290516000918291732f2a2543b76a4166549f7aab2e75bef0aefc5b0f916370a08231916024808301926020929190829003018186803b158015610ce857600080fd5b505afa158015610cfc573d6000803e3d6000fd5b505050506040513d6020811015610d1257600080fd5b50516002808501546040805160248101939093526001604484018190526064840183905260006084850181905260a4808601929092528251808603909201825260c490940182526020810180516001600160e01b031663394747c560e01b17815291518151959650939473960ea3e3c7fb317332d990873d354e18d764559094919282918083835b60208310610db95780518252601f199092019160209182019101610d9a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610e1b576040519150601f19603f3d011682016040523d82523d6000602084013e610e20565b606091505b5050905080610e62576040805162461bcd60e51b81526020600482015260096024820152682165786368616e676560b81b604482015290519081900360640190fd5b604080516370a0823160e01b81523060048201529051600091732f2a2543b76a4166549f7aab2e75bef0aefc5b0f916370a0823191602480820192602092909190829003018186803b158015610eb757600080fd5b505afa158015610ecb573d6000803e3d6000fd5b505050506040513d6020811015610ee157600080fd5b50516001808701546040805163ddc1f59d60e01b8152600060048201819052602482019490945260448101859052606481018490523060848201529051939450610f97939192733e01dd8a5e1fb3481f0f589056b428fc308af0fb9263ddc1f59d9260a4808201936020939283900390910190829087803b158015610f6557600080fd5b505af1158015610f79573d6000803e3d6000fd5b505050506040513d6020811015610f8f57600080fd5b50519061131b565b95945050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610a169084906110b2565b60008261100157506000610721565b8282028284828161100e57fe5b0414610a2d5760405162461bcd60e51b81526004018080602001828103825260218152602001806114466021913960400191505060405180910390fd5b60008082116110a1576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816110aa57fe5b049392505050565b6000611107826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610a1b9092919063ffffffff16565b805190915015610a165780806020019051602081101561112657600080fd5b5051610a165760405162461bcd60e51b815260040180806020018281038252602a815260200180611467602a913960400191505060405180910390fd5b6060824710156111a45760405162461bcd60e51b81526004018080602001828103825260268152602001806114206026913960400191505060405180910390fd5b6111ad85611375565b6111fe576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b6020831061123c5780518252601f19909201916020918201910161121d565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461129e576040519150601f19603f3d011682016040523d82523d6000602084013e6112a3565b606091505b50915091506112b382828661137b565b979650505050505050565b600082821115611315576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b600082820183811015610a2d576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3b151590565b6060831561138a575081610a2d565b82511561139a5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156113e45781810151838201526020016113cc565b50505050905090810190601f1680156114115780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212203f57863be5c02c31fd0bc6f62b61b730207645359a708ee4b5a4cf42f3f2273864736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11583,
        "contract": "contracts/modules/ArbitrumConvert.sol:ArbitrumConvert",
        "label": "outstanding",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(ConvertRecord)12085_storage)"
      },
      {
        "astId": 11589,
        "contract": "contracts/modules/ArbitrumConvert.sol:ArbitrumConvert",
        "label": "blockTimeout",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_mapping(t_uint256,t_struct(ConvertRecord)12085_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ArbitrumConvertLib.ConvertRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(ConvertRecord)12085_storage"
      },
      "t_struct(ConvertRecord)12085_storage": {
        "encoding": "inplace",
        "label": "struct ArbitrumConvertLib.ConvertRecord",
        "members": [
          {
            "astId": 12080,
            "contract": "contracts/modules/ArbitrumConvert.sol:ArbitrumConvert",
            "label": "when",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12082,
            "contract": "contracts/modules/ArbitrumConvert.sol:ArbitrumConvert",
            "label": "qty",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 12084,
            "contract": "contracts/modules/ArbitrumConvert.sol:ArbitrumConvert",
            "label": "qtyETH",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}